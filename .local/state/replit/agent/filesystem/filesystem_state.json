{"file_contents":{"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/Navbar.tsx":{"content":"import { Database, Layers3, ChevronDown, FilePlus, Upload, Download, FileText, FileJson, Edit, Trash2, Server } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport type { Project } from \"@shared/schema\";\n\ninterface NavbarProps {\n  currentProject: Project | null;\n  projects: Project[];\n  onSelectProject: (projectId: string) => void;\n  onCreateProject: () => void;\n  onRenameProject: () => void;\n  onDeleteProject: () => void;\n  onImportCSV: () => void;\n  onImportJSON: () => void;\n  onExportJSON: () => void;\n  onExportERD: () => void;\n  onExportDataDictionary: () => void;\n}\n\nexport default function Navbar({\n  currentProject,\n  projects,\n  onSelectProject,\n  onCreateProject,\n  onRenameProject,\n  onDeleteProject,\n  onImportCSV,\n  onImportJSON,\n  onExportJSON,\n  onExportERD,\n  onExportDataDictionary,\n}: NavbarProps) {\n  return (\n    <nav className=\"bg-coolgray-50 border-b border-coolgray-200 shadow-md sticky top-0 z-50 px-4 py-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-6\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-lg bg-primary-500 flex items-center justify-center\">\n              <Database className=\"h-5 w-5 text-white\" />\n            </div>\n            <h1 className=\"text-xl font-bold text-coolgray-600\">Schema Builder</h1>\n          </div>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"border-coolgray-200 text-coolgray-600 hover:bg-coolgray-100\"\n                data-testid=\"button-project-selector\"\n              >\n                <Layers3 className=\"h-4 w-4 mr-2\" />\n                {currentProject?.name || 'Select Project'}\n                <ChevronDown className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56 bg-white border-coolgray-200\">\n              {projects.map((project) => (\n                <DropdownMenuItem\n                  key={project.id}\n                  onClick={() => onSelectProject(project.id)}\n                  className={currentProject?.id === project.id ? \"bg-secondary-50\" : \"\"}\n                  data-testid={`menu-item-project-${project.id}`}\n                >\n                  {project.name}\n                </DropdownMenuItem>\n              ))}\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={onCreateProject} data-testid=\"menu-item-create-project\">\n                <FilePlus className=\"h-4 w-4 mr-2\" />\n                Create New Project\n              </DropdownMenuItem>\n              {currentProject && (\n                <>\n                  <DropdownMenuItem onClick={onRenameProject} data-testid=\"menu-item-rename-project\">\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Rename Project\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={onDeleteProject} \n                    className=\"text-danger-500\"\n                    data-testid=\"menu-item-delete-project\"\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Delete Project\n                  </DropdownMenuItem>\n                </>\n              )}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"border-secondary-500 text-secondary-500 hover:bg-secondary-50\"\n                data-testid=\"button-import\"\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Import\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"bg-white border-coolgray-200\">\n              <DropdownMenuItem onClick={onImportCSV} data-testid=\"menu-item-import-csv\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Import from CSV\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onImportJSON} data-testid=\"menu-item-import-json\">\n                <FileJson className=\"h-4 w-4 mr-2\" />\n                Import Project (JSON)\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className=\"border-primary-500 text-primary-500 hover:bg-primary-50\"\n                disabled={!currentProject}\n                data-testid=\"button-export\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"bg-white border-coolgray-200\">\n              <DropdownMenuItem onClick={onExportJSON} data-testid=\"menu-item-export-json\">\n                <FileJson className=\"h-4 w-4 mr-2\" />\n                Export Project (JSON)\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onExportERD} data-testid=\"menu-item-export-erd\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Export ERD (PNG)\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onExportDataDictionary} data-testid=\"menu-item-export-dictionary\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Export Data Dictionary (CSV)\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5946},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport type FieldType = 'string' | 'text' | 'int' | 'float' | 'number' | 'decimal' | \n  'boolean' | 'date' | 'datetime' | 'timestamp' | 'json' | 'jsonb' | \n  'uuid' | 'enum' | 'phone' | 'email';\n\nexport type EntityType = \n  | 'data-source'      // Container (NOT rendered as entity card, but as swimlane)\n  | 'data-stream'      // Ingestion config\n  | 'dlo'              // Raw data\n  | 'dmo'              // Unified data\n  | 'data-transform';  // Transformation logic (optional, advanced)\n\nexport type RelationshipType = \n  | 'feeds-into'      // Data Stream → DLO (1:1 ONLY)\n  | 'transforms-to'   // DLO → DMO (many:1)\n  | 'references';     // DMO → DMO (many:1, traditional FK)\n\nexport type SourceSystemType = \n  | 'salesforce' \n  | 'database' \n  | 'api' \n  | 'csv' \n  | 'erp' \n  | 'marketing-cloud' \n  | 'custom';\n\nexport type Cardinality = 'one-to-one' | 'one-to-many' | 'many-to-one';\n\nexport type DataCloudObjectType = 'Profile' | 'Engagement' | 'Other' | 'TBD';\n\nexport type ImplementationStatus = 'not-started' | 'in-progress' | 'completed';\n\nexport const fkReferenceSchema = z.object({\n  targetEntityId: z.string(),\n  targetFieldId: z.string(),\n  cardinality: z.enum(['one-to-one', 'one-to-many', 'many-to-one']),\n  relationshipLabel: z.string().optional(),\n  waypoints: z.array(z.object({ x: z.number(), y: z.number() })).optional(),\n});\n\nexport type FKReference = z.infer<typeof fkReferenceSchema>;\n\nexport const fieldSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Field name is required\"),\n  type: z.enum(['string', 'text', 'int', 'float', 'number', 'decimal', \n    'boolean', 'date', 'datetime', 'timestamp', 'json', 'jsonb', \n    'uuid', 'enum', 'phone', 'email']),\n  isPK: z.boolean().default(false),\n  isFK: z.boolean().default(false),\n  fkReference: fkReferenceSchema.optional(),\n  businessName: z.string().optional(),\n  notes: z.string().optional(),\n  sampleValues: z.array(z.string()).optional(),\n  containsPII: z.boolean().optional(),\n  visibleInERD: z.boolean().default(true),\n});\n\nexport type Field = z.infer<typeof fieldSchema>;\n\nexport const streamConfigSchema = z.object({\n  refreshType: z.enum(['full', 'incremental']),\n  schedule: z.enum(['real-time', 'hourly', 'daily', 'weekly', 'custom']),\n  customSchedule: z.string().optional(),\n  dataSourceId: z.string().optional(),\n  sourceObjectName: z.string(),\n  connectorType: z.enum(['native', 'mulesoft', 'csv', 'ftp', 'api']).optional(),\n});\n\nexport type StreamConfig = z.infer<typeof streamConfigSchema>;\n\nexport const dataCloudMetadataSchema = z.object({\n  streamConfig: streamConfigSchema.optional(),\n  objectType: z.enum(['DLO', 'DMO']).optional(),\n  profileObjectType: z.enum(['Profile', 'Engagement', 'Other', 'TBD']).optional(),\n  apiName: z.string().optional(),\n  transformLogic: z.string().optional(),\n});\n\nexport type DataCloudMetadata = z.infer<typeof dataCloudMetadataSchema>;\n\nexport const fieldMappingSchema = z.object({\n  targetFieldId: z.string(),\n  sourceEntityId: z.string(),\n  sourceFieldId: z.string(),\n  transformDescription: z.string().optional(),\n});\n\nexport type FieldMapping = z.infer<typeof fieldMappingSchema>;\n\nexport const entitySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Entity name is required\"),\n  type: z.enum(['data-source', 'data-stream', 'dlo', 'dmo', 'data-transform']),\n  fields: z.array(fieldSchema),\n  \n  // Linking properties\n  dataSourceId: z.string().optional(),\n  sourceDataStreamId: z.string().optional(),\n  sourceDLOIds: z.array(z.string()).optional(),\n  \n  // Data Cloud metadata\n  dataCloudMetadata: dataCloudMetadataSchema.optional(),\n  \n  // Field-level mappings\n  fieldMappings: z.array(fieldMappingSchema).optional(),\n  \n  // Legacy fields (for backward compatibility during migration)\n  dataSource: z.string().optional(),\n  businessPurpose: z.string().optional(),\n  implementationStatus: z.enum(['not-started', 'in-progress', 'completed']).optional(),\n  implementationNotes: z.string().optional(),\n  \n  position: z.object({ x: z.number(), y: z.number() }).optional(),\n});\n\nexport type Entity = z.infer<typeof entitySchema>;\n\nexport const dataSourceSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Data source name is required\"),\n  type: z.enum(['salesforce', 'database', 'api', 'csv', 'erp', 'marketing-cloud', 'custom']),\n  description: z.string().optional(),\n  connectionDetails: z.string().optional(),\n  environment: z.enum(['production', 'sandbox', 'dev', 'uat']).optional(),\n  contactPerson: z.string().optional(),\n  collapsed: z.boolean().optional(),\n});\n\nexport type DataSource = z.infer<typeof dataSourceSchema>;\n\nexport const relationshipSchema = z.object({\n  id: z.string(),\n  type: z.enum(['feeds-into', 'transforms-to', 'references']),\n  sourceEntityId: z.string(),\n  targetEntityId: z.string(),\n  label: z.string().optional(),\n  fieldMappings: z.array(z.object({\n    sourceFieldId: z.string(),\n    targetFieldId: z.string(),\n  })).optional(),\n});\n\nexport type Relationship = z.infer<typeof relationshipSchema>;\n\nexport const projectSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Project name is required\"),\n  clientName: z.string().optional(),\n  consultant: z.string().optional(),\n  createdAt: z.number(),\n  lastModified: z.number(),\n  dataSources: z.array(dataSourceSchema).optional(),\n  entities: z.array(entitySchema),\n  relationships: z.array(relationshipSchema).optional(),\n});\n\nexport type Project = z.infer<typeof projectSchema>;\n\nexport const insertProjectSchema = projectSchema.omit({ id: true, createdAt: true, lastModified: true });\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport const insertEntitySchema = entitySchema.omit({ id: true });\nexport type InsertEntity = z.infer<typeof insertEntitySchema>;\n\nexport const insertFieldSchema = fieldSchema.omit({ id: true });\nexport type InsertField = z.infer<typeof insertFieldSchema>;\n\nexport const insertDataSourceSchema = dataSourceSchema.omit({ id: true });\nexport type InsertDataSource = z.infer<typeof insertDataSourceSchema>;\n\nexport const insertRelationshipSchema = relationshipSchema.omit({ id: true });\nexport type InsertRelationship = z.infer<typeof insertRelationshipSchema>;\n","size_bytes":6217},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport Navbar from \"@/components/Navbar\";\nimport Toolbar from \"@/components/Toolbar\";\nimport GraphView from \"@/components/GraphView\";\nimport ListView from \"@/components/ListView\";\nimport EntityModal from \"@/components/EntityModal\";\nimport ProjectDialog from \"@/components/ProjectDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Project, Entity, FieldType, Relationship, DataSource } from \"@shared/schema\";\n\ntype ViewMode = 'graph' | 'table';\n\nexport default function Home() {\n  const { toast } = useToast();\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [currentProjectId, setCurrentProjectId] = useState<string | null>(null);\n  const [viewMode, setViewMode] = useState<ViewMode>('graph');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [typeFilter, setTypeFilter] = useState<FieldType | 'all'>('all');\n  const [selectedEntityId, setSelectedEntityId] = useState<string | null>(null);\n  \n  const [isEntityModalOpen, setIsEntityModalOpen] = useState(false);\n  const [editingEntity, setEditingEntity] = useState<Entity | null>(null);\n  \n  const [isProjectDialogOpen, setIsProjectDialogOpen] = useState(false);\n  const [projectDialogMode, setProjectDialogMode] = useState<'create' | 'rename'>('create');\n  \n  const [isDeleteProjectDialogOpen, setIsDeleteProjectDialogOpen] = useState(false);\n\n  const currentProject = projects.find(p => p.id === currentProjectId) || null;\n\n  useEffect(() => {\n    const stored = localStorage.getItem('schema-builder-projects');\n    if (stored) {\n      try {\n        const parsed = JSON.parse(stored);\n        const migratedProjects = parsed.map((project: any) => {\n          const relationships: Relationship[] = [];\n          \n          const migratedProject = {\n            ...project,\n            dataSources: project.dataSources || [],\n            relationships: project.relationships || [],\n            entities: (project.entities || []).map((entity: any) => {\n              let dataSource = entity.dataSource;\n              \n              if (!dataSource && entity.sourceSystemId && project.sourceSystems) {\n                const sourceSystem = project.sourceSystems.find((s: any) => s.id === entity.sourceSystemId);\n                if (sourceSystem) {\n                  dataSource = `${sourceSystem.name} (${sourceSystem.type})`;\n                }\n              }\n              \n              if (!dataSource && entity.sourceSystem) {\n                dataSource = entity.sourceSystem.name || entity.sourceSystem.type || '';\n              }\n              \n              // Extract relationships from old FK references\n              if (entity.fields) {\n                entity.fields.forEach((field: any) => {\n                  if (field.isFK && field.fkReference && !project.relationships) {\n                    relationships.push({\n                      id: `rel-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n                      type: 'references',\n                      sourceEntityId: entity.id,\n                      targetEntityId: field.fkReference.targetEntityId,\n                      label: field.fkReference.relationshipLabel,\n                      fieldMappings: [{\n                        sourceFieldId: field.id,\n                        targetFieldId: field.fkReference.targetFieldId,\n                      }],\n                    });\n                  }\n                });\n              }\n              \n              const { sourceSystemId, sourceSystem, ...entityRest } = entity;\n              return {\n                ...entityRest,\n                type: entity.type || 'dmo', // Default to DMO for existing entities\n                ...(dataSource && { dataSource }),\n              };\n            }),\n          };\n          \n          // Add extracted relationships if not already present\n          if (relationships.length > 0 && !project.relationships) {\n            migratedProject.relationships = relationships;\n          }\n          \n          delete migratedProject.sourceSystems;\n          return migratedProject;\n        });\n        \n        setProjects(migratedProjects);\n        localStorage.setItem('schema-builder-projects', JSON.stringify(migratedProjects));\n        if (migratedProjects.length > 0) {\n          setCurrentProjectId(migratedProjects[0].id);\n        }\n      } catch (e) {\n        console.error('Failed to load projects:', e);\n      }\n    } else {\n      // Create default project with sample entities and relationships for testing\n      const sampleDataStreamId = `entity-${Date.now()}-1`;\n      const sampleDLOId = `entity-${Date.now()}-2`;\n      const sampleDMOId = `entity-${Date.now()}-3`;\n      \n      const defaultProject: Project = {\n        id: `project-${Date.now()}`,\n        name: 'My First Project',\n        createdAt: Date.now(),\n        lastModified: Date.now(),\n        dataSources: [\n          {\n            id: `datasource-${Date.now()}`,\n            name: 'Salesforce CRM',\n            type: 'salesforce',\n            description: 'Production Salesforce instance',\n          }\n        ],\n        entities: [\n          {\n            id: sampleDataStreamId,\n            name: 'Contact_Stream',\n            type: 'data-stream',\n            fields: [\n              { id: 'field-1', name: 'ContactId', type: 'string', isPK: true, isFK: false, visibleInERD: true },\n              { id: 'field-2', name: 'Email', type: 'email', isPK: false, isFK: false, visibleInERD: true },\n              { id: 'field-3', name: 'FirstName', type: 'string', isPK: false, isFK: false, visibleInERD: true },\n            ],\n            dataCloudMetadata: {\n              streamConfig: {\n                refreshType: 'incremental',\n                schedule: 'hourly',\n                sourceObjectName: 'Contact',\n              }\n            },\n            position: { x: 100, y: 100 },\n          },\n          {\n            id: sampleDLOId,\n            name: 'Contact_DLO',\n            type: 'dlo',\n            fields: [\n              { id: 'field-dlo-1', name: 'Id', type: 'string', isPK: true, isFK: false, visibleInERD: true },\n              { id: 'field-dlo-2', name: 'Email', type: 'email', isPK: false, isFK: false, visibleInERD: true },\n              { \n                id: 'field-dlo-3', \n                name: 'StreamId', \n                type: 'string', \n                isPK: false, \n                isFK: true, \n                visibleInERD: true,\n                fkReference: {\n                  targetEntityId: sampleDataStreamId,\n                  targetFieldId: 'field-1',\n                  cardinality: 'many-to-one',\n                  relationshipLabel: 'sources from',\n                }\n              },\n            ],\n            dataCloudMetadata: {\n              objectType: 'DLO',\n            },\n            sourceDataStreamId: sampleDataStreamId,\n            position: { x: 500, y: 100 },\n          },\n          {\n            id: sampleDMOId,\n            name: 'Unified_Contact',\n            type: 'dmo',\n            fields: [\n              { id: 'field-dmo-1', name: 'UnifiedId', type: 'string', isPK: true, isFK: false, visibleInERD: true },\n              { id: 'field-dmo-2', name: 'Email', type: 'email', isPK: false, isFK: false, visibleInERD: true },\n              { \n                id: 'field-dmo-3', \n                name: 'SourceDLOId', \n                type: 'string', \n                isPK: false, \n                isFK: true, \n                visibleInERD: true,\n                fkReference: {\n                  targetEntityId: sampleDLOId,\n                  targetFieldId: 'field-dlo-1',\n                  cardinality: 'many-to-one',\n                  relationshipLabel: 'unified from',\n                }\n              },\n            ],\n            dataCloudMetadata: {\n              objectType: 'DMO',\n              profileObjectType: 'Profile',\n            },\n            sourceDLOIds: [sampleDLOId],\n            position: { x: 900, y: 100 },\n          },\n        ],\n        relationships: [],\n      };\n      setProjects([defaultProject]);\n      setCurrentProjectId(defaultProject.id);\n      localStorage.setItem('schema-builder-projects', JSON.stringify([defaultProject]));\n    }\n  }, []);\n\n  const saveProjects = (updatedProjects: Project[]) => {\n    setProjects(updatedProjects);\n    localStorage.setItem('schema-builder-projects', JSON.stringify(updatedProjects));\n  };\n\n  const updateCurrentProject = (updates: Partial<Project>) => {\n    if (!currentProject) return;\n    const updated = { ...currentProject, ...updates, lastModified: Date.now() };\n    const updatedProjects = projects.map(p => p.id === currentProject.id ? updated : p);\n    saveProjects(updatedProjects);\n  };\n\n  const handleCreateProject = (data: { name: string; clientName?: string; consultant?: string }) => {\n    const newProject: Project = {\n      id: `project-${Date.now()}`,\n      name: data.name,\n      clientName: data.clientName,\n      consultant: data.consultant,\n      createdAt: Date.now(),\n      lastModified: Date.now(),\n      dataSources: [],\n      entities: [],\n      relationships: [],\n    };\n    const updated = [...projects, newProject];\n    saveProjects(updated);\n    setCurrentProjectId(newProject.id);\n    toast({\n      title: \"Project created\",\n      description: `${newProject.name} has been created successfully.`,\n    });\n  };\n\n  const handleRenameProject = (data: { name: string; clientName?: string; consultant?: string }) => {\n    if (!currentProject) return;\n    updateCurrentProject(data);\n    toast({\n      title: \"Project updated\",\n      description: `Project has been updated successfully.`,\n    });\n  };\n\n  const handleDeleteProject = () => {\n    if (!currentProject) return;\n    const filtered = projects.filter(p => p.id !== currentProject.id);\n    saveProjects(filtered);\n    setCurrentProjectId(filtered.length > 0 ? filtered[0].id : null);\n    setIsDeleteProjectDialogOpen(false);\n    toast({\n      title: \"Project deleted\",\n      description: `${currentProject.name} has been deleted.`,\n      variant: \"destructive\",\n    });\n  };\n\n  const handleSaveEntity = (entityData: Partial<Entity>) => {\n    if (!currentProject) return;\n\n    if (entityData.id) {\n      const updatedEntities = currentProject.entities.map(e =>\n        e.id === entityData.id ? { ...e, ...entityData } as Entity : e\n      );\n      updateCurrentProject({ entities: updatedEntities });\n      toast({\n        title: \"Entity updated\",\n        description: `${entityData.name} has been updated successfully.`,\n      });\n    } else {\n      const newEntity: Entity = {\n        id: `entity-${Date.now()}`,\n        name: entityData.name!,\n        type: entityData.type || 'dmo',\n        fields: entityData.fields || [],\n        dataSource: entityData.dataSource,\n        businessPurpose: entityData.businessPurpose,\n        dataCloudMetadata: entityData.dataCloudMetadata,\n        position: {\n          x: 100 + (currentProject.entities.length * 50),\n          y: 100 + (currentProject.entities.length * 50),\n        },\n        implementationStatus: entityData.implementationStatus,\n        implementationNotes: entityData.implementationNotes,\n      };\n      updateCurrentProject({ entities: [...currentProject.entities, newEntity] });\n      toast({\n        title: \"Entity created\",\n        description: `${newEntity.name} has been created successfully.`,\n      });\n    }\n    setIsEntityModalOpen(false);\n    setEditingEntity(null);\n  };\n\n  const handleUpdateEntityPosition = (entityId: string, position: { x: number; y: number }) => {\n    if (!currentProject) return;\n    const updatedEntities = currentProject.entities.map(e =>\n      e.id === entityId ? { ...e, position } : e\n    );\n    updateCurrentProject({ entities: updatedEntities });\n  };\n\n  const handleEntityDoubleClick = (entityId: string) => {\n    const entity = currentProject?.entities.find(e => e.id === entityId);\n    if (entity) {\n      setEditingEntity(entity);\n      setIsEntityModalOpen(true);\n    }\n  };\n\n  const handleUpdateRelationshipWaypoints = (entityId: string, fieldId: string, waypoints: { x: number; y: number }[]) => {\n    if (!currentProject) return;\n    const updatedEntities = currentProject.entities.map(entity => {\n      if (entity.id === entityId) {\n        return {\n          ...entity,\n          fields: entity.fields.map(field => {\n            if (field.id === fieldId && field.fkReference) {\n              return {\n                ...field,\n                fkReference: {\n                  ...field.fkReference,\n                  waypoints,\n                },\n              };\n            }\n            return field;\n          }),\n        };\n      }\n      return entity;\n    });\n    updateCurrentProject({ entities: updatedEntities });\n  };\n\n  const handleCreateDataSource = (dataSourceData: Partial<DataSource>) => {\n    if (!currentProject) return;\n    const newDataSource: DataSource = {\n      id: `datasource-${Date.now()}`,\n      name: dataSourceData.name || 'New Data Source',\n      type: dataSourceData.type || 'salesforce',\n      description: dataSourceData.description,\n      environment: dataSourceData.environment,\n      contactPerson: dataSourceData.contactPerson,\n    };\n    updateCurrentProject({ \n      dataSources: [...(currentProject.dataSources || []), newDataSource] \n    });\n    toast({\n      title: \"Data source created\",\n      description: `${newDataSource.name} has been created successfully.`,\n    });\n  };\n\n  const handleGenerateDLO = (dataStreamId: string) => {\n    if (!currentProject) return;\n    \n    const dataStream = currentProject.entities.find(e => e.id === dataStreamId);\n    if (!dataStream || dataStream.type !== 'data-stream') {\n      toast({\n        title: \"Error\",\n        description: \"Can only generate DLO from Data Stream\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if DLO already exists\n    const existingDLO = currentProject.entities.find(\n      e => e.type === 'dlo' && e.sourceDataStreamId === dataStreamId\n    );\n    if (existingDLO) {\n      toast({\n        title: \"DLO already exists\",\n        description: `${existingDLO.name} is already linked to this Data Stream`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create DLO\n    const dloName = `${dataStream.name.replace(' Stream', '')}_DLO`;\n    const dlo: Entity = {\n      id: `entity-${Date.now()}`,\n      name: dloName,\n      type: 'dlo',\n      fields: dataStream.fields.map(f => ({\n        ...f,\n        id: `field-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      })),\n      sourceDataStreamId: dataStreamId,\n      dataCloudMetadata: {\n        objectType: 'DLO',\n        apiName: `${dataStream.name.replace(/\\s/g, '_')}_DLO`,\n      },\n      position: {\n        x: dataStream.position?.x || 100,\n        y: (dataStream.position?.y || 100) + 220,\n      },\n    };\n\n    // Create relationship\n    const relationship: import(\"@shared/schema\").Relationship = {\n      id: `rel-${Date.now()}`,\n      type: 'feeds-into',\n      sourceEntityId: dataStreamId,\n      targetEntityId: dlo.id,\n      label: 'Ingests',\n      fieldMappings: dataStream.fields.map((sourceField, index) => ({\n        sourceFieldId: sourceField.id,\n        targetFieldId: dlo.fields[index].id,\n      })),\n    };\n\n    updateCurrentProject({\n      entities: [...currentProject.entities, dlo],\n      relationships: [...(currentProject.relationships || []), relationship],\n    });\n\n    toast({\n      title: \"DLO created\",\n      description: `${dloName} created with ${dlo.fields.length} fields`,\n    });\n  };\n\n  const handleGenerateDMO = (dloId: string) => {\n    if (!currentProject) return;\n    \n    const dlo = currentProject.entities.find(e => e.id === dloId);\n    if (!dlo || dlo.type !== 'dlo') {\n      toast({\n        title: \"Error\",\n        description: \"Can only generate DMO from DLO\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create DMO\n    const dmoName = `${dlo.name.replace('_DLO', '')}_DMO`;\n    const dmoFields = dlo.fields.map(f => ({\n      ...f,\n      id: `field-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    }));\n\n    const dmo: Entity = {\n      id: `entity-${Date.now()}`,\n      name: dmoName,\n      type: 'dmo',\n      fields: dmoFields,\n      sourceDLOIds: [dloId],\n      dataCloudMetadata: {\n        objectType: 'DMO',\n        profileObjectType: 'TBD',\n        apiName: `${dlo.name.replace('_DLO', '')}_DMO`,\n      },\n      fieldMappings: dlo.fields.map((dloField, index) => ({\n        targetFieldId: dmoFields[index].id,\n        sourceEntityId: dloId,\n        sourceFieldId: dloField.id,\n        transformDescription: 'Direct copy',\n      })),\n      position: {\n        x: dlo.position?.x || 100,\n        y: (dlo.position?.y || 100) + 220,\n      },\n    };\n\n    // Create relationship\n    const relationship: import(\"@shared/schema\").Relationship = {\n      id: `rel-${Date.now()}`,\n      type: 'transforms-to',\n      sourceEntityId: dloId,\n      targetEntityId: dmo.id,\n      label: 'Transforms',\n      fieldMappings: dmo.fieldMappings?.map(fm => ({\n        sourceFieldId: fm.sourceFieldId,\n        targetFieldId: fm.targetFieldId,\n      })),\n    };\n\n    updateCurrentProject({\n      entities: [...currentProject.entities, dmo],\n      relationships: [...(currentProject.relationships || []), relationship],\n    });\n\n    toast({\n      title: \"DMO created\",\n      description: `${dmoName} created with ${dmo.fields.length} fields`,\n    });\n  };\n\n  const handleExportJSON = () => {\n    if (!currentProject) return;\n    const dataStr = JSON.stringify(currentProject, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = `${currentProject.name.replace(/\\s+/g, '_')}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n    toast({\n      title: \"Export successful\",\n      description: \"Project exported as JSON.\",\n    });\n  };\n\n  const handleExportERD = () => {\n    toast({\n      title: \"Export ERD\",\n      description: \"ERD export feature coming soon!\",\n    });\n  };\n\n  const handleExportDataDictionary = () => {\n    if (!currentProject) return;\n    let csv = 'Entity,Entity Type,Field Name,Type,Business Name,Notes,Data Source,Data Cloud Type,Is PK,Is FK,Contains PII,Visible in ERD\\n';\n    currentProject.entities.forEach(entity => {\n      entity.fields.forEach(field => {\n        csv += `\"${entity.name}\",\"${entity.type}\",\"${field.name}\",\"${field.type}\",\"${field.businessName || ''}\",\"${field.notes || ''}\",\"${entity.dataSource || ''}\",\"${entity.dataCloudMetadata?.profileObjectType || ''}\",${field.isPK},${field.isFK},${field.containsPII || false},${field.visibleInERD !== false}\\n`;\n      });\n    });\n    const dataUri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);\n    const exportFileDefaultName = `${currentProject.name.replace(/\\s+/g, '_')}_data_dictionary.csv`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n    toast({\n      title: \"Export successful\",\n      description: \"Data dictionary exported as CSV.\",\n    });\n  };\n\n  const handleImportJSON = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        try {\n          const imported = JSON.parse(event.target?.result as string) as Project;\n          imported.id = `project-${Date.now()}`;\n          imported.createdAt = Date.now();\n          imported.lastModified = Date.now();\n          const updated = [...projects, imported];\n          saveProjects(updated);\n          setCurrentProjectId(imported.id);\n          toast({\n            title: \"Import successful\",\n            description: `${imported.name} has been imported.`,\n          });\n        } catch (error) {\n          toast({\n            title: \"Import failed\",\n            description: \"Invalid project file.\",\n            variant: \"destructive\",\n          });\n        }\n      };\n      reader.readAsText(file);\n    };\n    input.click();\n  };\n\n  const handleImportCSV = () => {\n    toast({\n      title: \"Import CSV\",\n      description: \"CSV import feature coming soon!\",\n    });\n  };\n\n  const filteredEntities = currentProject?.entities.filter(entity => {\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      const matchesEntity = entity.name.toLowerCase().includes(query);\n      const matchesField = entity.fields.some(f => f.name.toLowerCase().includes(query));\n      if (!matchesEntity && !matchesField) return false;\n    }\n    return true;\n  }) || [];\n\n  return (\n    <div className=\"h-screen flex flex-col bg-coolgray-50\">\n      <Navbar\n        currentProject={currentProject}\n        projects={projects}\n        onSelectProject={setCurrentProjectId}\n        onCreateProject={() => {\n          setProjectDialogMode('create');\n          setIsProjectDialogOpen(true);\n        }}\n        onRenameProject={() => {\n          setProjectDialogMode('rename');\n          setIsProjectDialogOpen(true);\n        }}\n        onDeleteProject={() => setIsDeleteProjectDialogOpen(true)}\n        onImportCSV={handleImportCSV}\n        onImportJSON={handleImportJSON}\n        onExportJSON={handleExportJSON}\n        onExportERD={handleExportERD}\n        onExportDataDictionary={handleExportDataDictionary}\n      />\n\n      <Toolbar\n        viewMode={viewMode}\n        onViewModeChange={setViewMode}\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n        typeFilter={typeFilter}\n        onTypeFilterChange={setTypeFilter}\n      />\n\n      <div className=\"flex-1 overflow-hidden\">\n        {viewMode === 'graph' ? (\n          <GraphView\n            entities={filteredEntities}\n            relationships={currentProject?.relationships || []}\n            selectedEntityId={selectedEntityId}\n            searchQuery={searchQuery}\n            onSelectEntity={setSelectedEntityId}\n            onUpdateEntityPosition={handleUpdateEntityPosition}\n            onGenerateDLO={handleGenerateDLO}\n            onGenerateDMO={handleGenerateDMO}\n            onEntityDoubleClick={handleEntityDoubleClick}\n            onUpdateRelationshipWaypoints={handleUpdateRelationshipWaypoints}\n          />\n        ) : (\n          <ListView\n            entities={filteredEntities}\n            selectedEntityId={selectedEntityId}\n            onEntityClick={handleEntityDoubleClick}\n          />\n        )}\n      </div>\n\n      {currentProject && (\n        <Button\n          onClick={() => {\n            setEditingEntity(null);\n            setIsEntityModalOpen(true);\n          }}\n          className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full bg-primary-500 hover:bg-primary-600 text-white shadow-lg\"\n          data-testid=\"button-add-entity\"\n        >\n          <Plus className=\"h-6 w-6\" />\n        </Button>\n      )}\n\n      <EntityModal\n        isOpen={isEntityModalOpen}\n        onClose={() => {\n          setIsEntityModalOpen(false);\n          setEditingEntity(null);\n        }}\n        entity={editingEntity}\n        entities={currentProject?.entities || []}\n        dataSources={currentProject?.dataSources || []}\n        onSave={handleSaveEntity}\n        onCreateDataSource={handleCreateDataSource}\n      />\n\n      <ProjectDialog\n        isOpen={isProjectDialogOpen}\n        onClose={() => setIsProjectDialogOpen(false)}\n        project={projectDialogMode === 'rename' ? currentProject : null}\n        onSave={projectDialogMode === 'create' ? handleCreateProject : handleRenameProject}\n        title={projectDialogMode === 'create' ? 'Create New Project' : 'Rename Project'}\n      />\n\n      <AlertDialog open={isDeleteProjectDialogOpen} onOpenChange={setIsDeleteProjectDialogOpen}>\n        <AlertDialogContent className=\"bg-white border-coolgray-200\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-coolgray-600\">Delete Project</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-coolgray-500\">\n              Are you sure you want to delete \"{currentProject?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel className=\"border-coolgray-200\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteProject}\n              className=\"bg-danger-500 hover:bg-danger-700 text-white\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":25217},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --button-outline: rgba(0, 0, 0, 0.10);\n  --badge-outline: rgba(0, 0, 0, 0.05);\n  --opaque-button-border-intensity: -10;\n  --elevate-1: rgba(0, 0, 0, 0.03);\n  --elevate-2: rgba(0, 0, 0, 0.07);\n\n  --background: 0 0% 97.3%;\n  --foreground: 222 47% 11%;\n  --border: 214 32% 91%;\n  --card: 210 20% 98%;\n  --card-foreground: 222 47% 11%;\n  --card-border: 210 20% 95%;\n  --sidebar: 210 20% 96%;\n  --sidebar-foreground: 222 47% 11%;\n  --sidebar-border: 210 20% 93%;\n  --sidebar-primary: 30 79% 57%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 204 45% 88%;\n  --sidebar-accent-foreground: 204 49% 42%;\n  --sidebar-ring: 204 49% 42%;\n  --popover: 210 20% 95%;\n  --popover-foreground: 222 47% 11%;\n  --popover-border: 210 20% 92%;\n  --primary: 30 79% 57%;\n  --primary-foreground: 0 0% 100%;\n  --secondary: 210 20% 92%;\n  --secondary-foreground: 222 47% 11%;\n  --muted: 210 16% 93%;\n  --muted-foreground: 215 14% 34%;\n  --accent: 204 45% 90%;\n  --accent-foreground: 204 49% 42%;\n  --destructive: 356 83% 57%;\n  --destructive-foreground: 0 0% 100%;\n  --input: 210 20% 88%;\n  --ring: 204 49% 42%;\n  --chart-1: 204 49% 42%;\n  --chart-2: 30 79% 57%;\n  --chart-3: 356 83% 57%;\n  --chart-4: 109 56% 37%;\n  --chart-5: 47 93% 67%;\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Courier New, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(222 47% 11% / 0.05), 0px 1px 2px -1px hsl(222 47% 11% / 0.05);\n  --shadow: 0px 2px 4px 0px hsl(222 47% 11% / 0.05), 0px 1px 2px -1px hsl(222 47% 11% / 0.05);\n  --shadow-md: 0px 4px 6px -1px hsl(222 47% 11% / 0.05), 0px 2px 4px -2px hsl(222 47% 11% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(222 47% 11% / 0.1), 0px 4px 6px -4px hsl(222 47% 11% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 47% 11% / 0.1), 0px 8px 10px -6px hsl(222 47% 11% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 47% 11% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  --primary-border: hsl(from var(--primary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from var(--secondary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from var(--muted) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from var(--accent) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from var(--destructive) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from var(--sidebar-primary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from var(--sidebar-accent) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255, 255, 255, 0.10);\n  --badge-outline: rgba(255, 255, 255, 0.05);\n  --opaque-button-border-intensity: 8;\n  --elevate-1: rgba(255, 255, 255, 0.04);\n  --elevate-2: rgba(255, 255, 255, 0.09);\n\n  --background: 222 47% 4%;\n  --foreground: 210 20% 92%;\n  --border: 215 20% 14%;\n  --card: 220 26% 6%;\n  --card-foreground: 210 20% 92%;\n  --card-border: 220 26% 10%;\n  --sidebar: 220 26% 8%;\n  --sidebar-foreground: 210 20% 92%;\n  --sidebar-border: 220 26% 12%;\n  --sidebar-primary: 30 79% 57%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 204 60% 12%;\n  --sidebar-accent-foreground: 204 49% 60%;\n  --sidebar-ring: 204 49% 60%;\n  --popover: 220 26% 10%;\n  --popover-foreground: 210 20% 92%;\n  --popover-border: 220 26% 14%;\n  --primary: 30 79% 57%;\n  --primary-foreground: 0 0% 100%;\n  --secondary: 220 26% 14%;\n  --secondary-foreground: 210 20% 92%;\n  --muted: 220 20% 12%;\n  --muted-foreground: 215 14% 58%;\n  --accent: 204 50% 14%;\n  --accent-foreground: 204 49% 60%;\n  --destructive: 356 83% 57%;\n  --destructive-foreground: 0 0% 100%;\n  --input: 220 26% 18%;\n  --ring: 204 49% 60%;\n  --chart-1: 204 49% 60%;\n  --chart-2: 30 79% 67%;\n  --chart-3: 356 83% 67%;\n  --chart-4: 109 56% 50%;\n  --chart-5: 47 93% 75%;\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Courier New, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.2);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.2);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 2px 4px 0px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.3), 0px 2px 4px -2px hsl(0 0% 0% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.5), 0px 8px 10px -6px hsl(0 0% 0% / 0.5);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.6);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  --primary-border: hsl(from var(--primary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from var(--secondary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from var(--muted) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from var(--accent) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from var(--destructive) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from var(--sidebar-primary) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from var(--sidebar-accent) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@keyframes pulse-ring {\n  0%, 100% { \n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.5); \n  }\n  50% { \n    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); \n  }\n}\n\n.pulse-ring {\n  animation: pulse-ring 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}","size_bytes":6127},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/examples/Navbar.tsx":{"content":"import Navbar from '../Navbar';\nimport type { Project } from '@shared/schema';\n\nexport default function NavbarExample() {\n  const projects: Project[] = [\n    {\n      id: '1',\n      name: 'Acme Corp Data Cloud',\n      clientName: 'Acme Corporation',\n      consultant: 'John Smith',\n      createdAt: Date.now(),\n      lastModified: Date.now(),\n      entities: [],\n    },\n    {\n      id: '2',\n      name: 'TechStart Integration',\n      clientName: 'TechStart Inc',\n      createdAt: Date.now(),\n      lastModified: Date.now(),\n      entities: [],\n    },\n  ];\n\n  return (\n    <Navbar\n      currentProject={projects[0]}\n      projects={projects}\n      onSelectProject={(id) => console.log('Select project:', id)}\n      onCreateProject={() => console.log('Create project')}\n      onRenameProject={() => console.log('Rename project')}\n      onDeleteProject={() => console.log('Delete project')}\n      onImportCSV={() => console.log('Import CSV')}\n      onImportJSON={() => console.log('Import JSON')}\n      onExportJSON={() => console.log('Export JSON')}\n      onExportERD={() => console.log('Export ERD')}\n      onExportDataDictionary={() => console.log('Export Data Dictionary')}\n    />\n  );\n}\n","size_bytes":1188},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        // shadcn colors (CSS variables)\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          // Direct orange palette\n          50: '#FFF6EB',\n          100: '#FEE7C8',\n          200: '#F9D09B',\n          300: '#F0B369',\n          400: '#E8A658',\n          500: '#E49A43',\n          600: '#C78235',\n          700: '#A06727',\n          800: '#7C501C',\n          900: '#5C3810',\n          950: '#3A2304',\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n          // Direct blue palette\n          50: '#E6F3FB',\n          100: '#C0E0F4',\n          200: '#99CCEA',\n          300: '#73B9E0',\n          400: '#5FB1E5',\n          500: '#4AA0D9',\n          600: '#3B7FB0',\n          700: '#2E648B',\n          800: '#224967',\n          900: '#162F43',\n          950: '#09161F',\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        // Brand color palettes\n        coolgray: {\n          50: '#F8FAFC',\n          100: '#F1F5F9',\n          200: '#E2E8F0',\n          300: '#CBD5E1',\n          400: '#94A3B8',\n          500: '#64748B',\n          600: '#475569',\n          700: '#334155',\n          800: '#1E293B',\n          900: '#0F172A',\n          950: '#020617',\n        },\n        tertiary: {\n          50: '#F9FCEA',\n          100: '#EBF2C4',\n          200: '#DCE79F',\n          300: '#CBDD7A',\n          400: '#BEDA59',\n          500: '#BED163',\n          600: '#9AB04E',\n          700: '#7A893D',\n          800: '#5B662C',\n          900: '#3B431B',\n          950: '#1B200A',\n        },\n        success: {\n          50: '#D8F7DB',\n          500: '#2ABF3C',\n          700: '#1F8E2E',\n        },\n        danger: {\n          50: '#FEEAEB',\n          500: '#E74B3C',\n          700: '#BF3428',\n        },\n        warning: {\n          50: '#FFF7E6',\n          500: '#FFC700',\n          700: '#D8A500',\n        },\n        info: {\n          50: '#E6F3FB',\n          500: '#4AA0D9',\n          700: '#2E648B',\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4682},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/GraphView.tsx":{"content":"import { useRef, useState, useEffect } from \"react\";\nimport { Plus, Minus, Maximize2, RotateCcw, Target } from \"lucide-react\";\nimport EntityNode from \"./EntityNode\";\nimport EntityLevelLine from \"./EntityLevelLine\";\nimport FieldLevelLine from \"./FieldLevelLine\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { Entity, Relationship } from \"@shared/schema\";\n\ninterface GraphViewProps {\n  entities: Entity[];\n  relationships?: Relationship[];\n  selectedEntityId: string | null;\n  searchQuery?: string;\n  onSelectEntity: (entityId: string | null) => void;\n  onUpdateEntityPosition: (entityId: string, position: { x: number; y: number }) => void;\n  onEntityDoubleClick: (entityId: string) => void;\n  onGenerateDLO?: (entityId: string) => void;\n  onGenerateDMO?: (entityId: string) => void;\n  onUpdateRelationshipWaypoints: (entityId: string, fieldId: string, waypoints: { x: number; y: number }[]) => void;\n}\n\ninterface DragState {\n  entityId: string;\n  startX: number;\n  startY: number;\n  offsetX: number;\n  offsetY: number;\n}\n\nexport default function GraphView({\n  entities,\n  relationships = [],\n  selectedEntityId,\n  searchQuery = '',\n  onSelectEntity,\n  onUpdateEntityPosition,\n  onEntityDoubleClick,\n  onGenerateDLO,\n  onGenerateDMO,\n  onUpdateRelationshipWaypoints,\n}: GraphViewProps) {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const [dragState, setDragState] = useState<DragState | null>(null);\n  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1.0);\n\n  const handleEntityDragStart = (entityId: string, e: React.DragEvent) => {\n    e.stopPropagation();\n    const entity = entities.find(ent => ent.id === entityId);\n    if (!entity) return;\n\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect) return;\n\n    setDragState({\n      entityId,\n      startX: entity.position?.x || 100,\n      startY: entity.position?.y || 100,\n      offsetX: e.clientX - rect.left - (entity.position?.x || 100),\n      offsetY: e.clientY - rect.top - (entity.position?.y || 100),\n    });\n  };\n\n  const handleEntityDrag = (e: React.DragEvent) => {\n    if (!dragState || !canvasRef.current) return;\n    if (e.clientX === 0 && e.clientY === 0) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const newX = e.clientX - rect.left - dragState.offsetX;\n    const newY = e.clientY - rect.top - dragState.offsetY;\n\n    onUpdateEntityPosition(dragState.entityId, { x: newX, y: newY });\n  };\n\n  const handleEntityDragEnd = () => {\n    if (dragState) {\n      const entity = entities.find(e => e.id === dragState.entityId);\n      if (entity?.position) {\n        const GRID_SIZE = 20;\n        const snappedPosition = {\n          x: Math.round(entity.position.x / GRID_SIZE) * GRID_SIZE,\n          y: Math.round(entity.position.y / GRID_SIZE) * GRID_SIZE,\n        };\n        onUpdateEntityPosition(dragState.entityId, snappedPosition);\n      }\n    }\n    setDragState(null);\n  };\n\n  const handleCanvasMouseDown = (e: React.MouseEvent) => {\n    if (e.button !== 0) return;\n    if ((e.target as HTMLElement).closest('[data-testid^=\"entity-node-\"]')) return;\n    \n    onSelectEntity(null);\n  };\n\n  // Search matching logic\n  const matchingEntities = entities.filter(entity =>\n    searchQuery && entity.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const hasSearchQuery = searchQuery.trim().length > 0;\n\n  // Zoom handlers\n  const handleZoomIn = () => {\n    setZoom(prevZoom => Math.min(5.0, prevZoom + 0.1));\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prevZoom => Math.max(0.1, prevZoom - 0.1));\n  };\n\n  const handleResetView = () => {\n    setZoom(1.0);\n    setPanOffset({ x: 0, y: 0 });\n  };\n\n  const handleFitToScreen = () => {\n    if (entities.length === 0 || !canvasRef.current) return;\n\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n    \n    entities.forEach(entity => {\n      const x = entity.position?.x || 100;\n      const y = entity.position?.y || 100;\n      const ENTITY_WIDTH = 320;\n      const ENTITY_HEIGHT = 200;\n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x + ENTITY_WIDTH);\n      maxY = Math.max(maxY, y + ENTITY_HEIGHT);\n    });\n\n    const bounds = {\n      width: maxX - minX,\n      height: maxY - minY,\n      centerX: (minX + maxX) / 2,\n      centerY: (minY + maxY) / 2,\n    };\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const padding = 100;\n    const scaleX = (rect.width - padding * 2) / bounds.width;\n    const scaleY = (rect.height - padding * 2) / bounds.height;\n    const newZoom = Math.min(Math.max(scaleX, scaleY), 1.0);\n\n    setZoom(newZoom);\n    setPanOffset({\n      x: rect.width / 2 - bounds.centerX * newZoom,\n      y: rect.height / 2 - bounds.centerY * newZoom,\n    });\n  };\n\n  const centerOnEntity = (entityId: string) => {\n    const entity = entities.find(e => e.id === entityId);\n    if (!entity || !canvasRef.current) return;\n\n    const rect = canvasRef.current.getBoundingClientRect();\n    const entityX = entity.position?.x || 100;\n    const entityY = entity.position?.y || 100;\n\n    if (zoom < 0.8) {\n      setZoom(1.0);\n    }\n\n    setPanOffset({\n      x: rect.width / 2 - (entityX + 160) * (zoom < 0.8 ? 1.0 : zoom),\n      y: rect.height / 2 - (entityY + 100) * (zoom < 0.8 ? 1.0 : zoom),\n    });\n\n    onSelectEntity(entityId);\n  };\n\n  // Mouse wheel for pan and zoom\n  const handleWheel = (e: React.WheelEvent) => {\n    e.preventDefault();\n\n    // Ctrl/Cmd + scroll = zoom\n    if (e.ctrlKey || e.metaKey) {\n      const rect = canvasRef.current?.getBoundingClientRect();\n      if (!rect) return;\n\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      const delta = e.deltaY > 0 ? -0.1 : 0.1;\n      const newZoom = Math.min(5.0, Math.max(0.1, zoom + delta));\n\n      const scale = newZoom / zoom;\n      setPanOffset({\n        x: mouseX - (mouseX - panOffset.x) * scale,\n        y: mouseY - (mouseY - panOffset.y) * scale,\n      });\n\n      setZoom(newZoom);\n    } else if (e.shiftKey) {\n      // Shift + scroll = horizontal pan\n      setPanOffset({\n        x: panOffset.x - e.deltaY,\n        y: panOffset.y,\n      });\n    } else {\n      // Regular scroll = vertical pan (or trackpad swipe)\n      setPanOffset({\n        x: panOffset.x - e.deltaX,\n        y: panOffset.y - e.deltaY,\n      });\n    }\n  };\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === '0') {\n        e.preventDefault();\n        handleResetView();\n      } else if ((e.ctrlKey || e.metaKey) && (e.key === '+' || e.key === '=')) {\n        e.preventDefault();\n        handleZoomIn();\n      } else if ((e.ctrlKey || e.metaKey) && (e.key === '-' || e.key === '_')) {\n        e.preventDefault();\n        handleZoomOut();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [zoom]);\n\n  const renderRelationshipLines = () => {\n    const lines: JSX.Element[] = [];\n\n    // 1. Entity-level lines (feeds-into: Data Stream → DLO)\n    relationships\n      .filter(rel => rel.type === 'feeds-into')\n      .forEach(rel => {\n        const sourceEntity = entities.find(e => e.id === rel.sourceEntityId);\n        const targetEntity = entities.find(e => e.id === rel.targetEntityId);\n        \n        if (!sourceEntity || !targetEntity) return;\n        \n        lines.push(\n          <EntityLevelLine\n            key={rel.id}\n            relationship={rel}\n            sourceEntity={sourceEntity}\n            targetEntity={targetEntity}\n            zoom={zoom}\n            panOffset={panOffset}\n          />\n        );\n      });\n\n    // 2. Field-level lines (transforms-to: DLO → DMO OR DMO → DMO)\n    relationships\n      .filter(rel => rel.type === 'transforms-to')\n      .forEach(rel => {\n        const sourceEntity = entities.find(e => e.id === rel.sourceEntityId);\n        const targetEntity = entities.find(e => e.id === rel.targetEntityId);\n        \n        if (!sourceEntity || !targetEntity) return;\n        \n        // Get field mappings from relationship OR from target entity\n        const mappings = rel.fieldMappings || \n                         targetEntity.fieldMappings?.filter(fm => fm.sourceEntityId === sourceEntity.id) ||\n                         [];\n        \n        // Render one line per field mapping\n        mappings.forEach(mapping => {\n          const sourceField = sourceEntity.fields.find(f => f.id === mapping.sourceFieldId);\n          const targetField = targetEntity.fields.find(f => f.id === mapping.targetFieldId);\n          \n          if (!sourceField || !targetField) return;\n          \n          lines.push(\n            <FieldLevelLine\n              key={`${rel.id}-${mapping.targetFieldId}`}\n              sourceEntity={sourceEntity}\n              targetEntity={targetEntity}\n              sourceField={sourceField}\n              targetField={targetField}\n              relationshipType=\"transforms-to\"\n              zoom={zoom}\n              panOffset={panOffset}\n            />\n          );\n        });\n      });\n\n    // 3. Field-level lines (references: DMO → DMO FK relationships)\n    entities.forEach(entity => {\n      entity.fields\n        .filter(f => f.isFK && f.fkReference && f.visibleInERD !== false)\n        .forEach(field => {\n          const targetEntity = entities.find(e => e.id === field.fkReference!.targetEntityId);\n          const targetField = targetEntity?.fields.find(f => f.id === field.fkReference!.targetFieldId);\n          \n          if (!targetEntity || !targetField) return;\n          \n          lines.push(\n            <FieldLevelLine\n              key={`${entity.id}-${field.id}`}\n              sourceEntity={entity}\n              targetEntity={targetEntity}\n              sourceField={field}\n              targetField={targetField}\n              relationshipType=\"references\"\n              cardinality={field.fkReference!.cardinality}\n              relationshipLabel={field.fkReference!.relationshipLabel}\n              waypoints={field.fkReference!.waypoints}\n              zoom={zoom}\n              panOffset={panOffset}\n              onUpdateWaypoints={(fieldId, waypoints) => \n                onUpdateRelationshipWaypoints(entity.id, fieldId, waypoints)\n              }\n            />\n          );\n        });\n    });\n\n    return lines;\n  };\n\n\n  return (\n    <div\n      ref={canvasRef}\n      className=\"relative w-full h-full bg-white overflow-hidden\"\n      onMouseDown={handleCanvasMouseDown}\n      onWheel={handleWheel}\n      style={{\n        backgroundImage: `\n          linear-gradient(to right, #E2E8F0 1px, transparent 1px),\n          linear-gradient(to bottom, #E2E8F0 1px, transparent 1px)\n        `,\n        backgroundSize: `${20 * zoom}px ${20 * zoom}px`,\n        backgroundPosition: `${panOffset.x}px ${panOffset.y}px`,\n      }}\n      data-testid=\"graph-canvas\"\n    >\n      <svg \n        className=\"absolute inset-0\" \n        style={{ \n          zIndex: 1, \n          pointerEvents: 'none',\n          width: '100%',\n          height: '100%',\n          overflow: 'visible'\n        }}\n      >\n        <defs>\n          {/* Arrow markers */}\n          <marker id=\"arrow-blue\" markerWidth=\"10\" markerHeight=\"10\" refX=\"9\" refY=\"3\" orient=\"auto\">\n            <polygon points=\"0 0, 10 3, 0 6\" fill=\"#4AA0D9\" />\n          </marker>\n          <marker id=\"arrow-green\" markerWidth=\"10\" markerHeight=\"10\" refX=\"9\" refY=\"3\" orient=\"auto\">\n            <polygon points=\"0 0, 10 3, 0 6\" fill=\"#BED163\" />\n          </marker>\n          \n          {/* Animated data flow pattern */}\n          <pattern id=\"data-flow-pattern\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n            <circle cx=\"5\" cy=\"10\" r=\"2\" fill=\"#4AA0D9\" opacity=\"0.6\">\n              <animate attributeName=\"cx\" from=\"5\" to=\"25\" dur=\"2s\" repeatCount=\"indefinite\" />\n            </circle>\n          </pattern>\n          \n          {/* Crow's foot notation markers for references relationships */}\n          <marker id=\"cf-one\" markerWidth=\"16\" markerHeight=\"16\" refX=\"8\" refY=\"8\" orient=\"auto\">\n            <line x1=\"8\" y1=\"4\" x2=\"8\" y2=\"12\" stroke=\"#64748B\" strokeWidth=\"2\" />\n          </marker>\n          <marker id=\"cf-many\" markerWidth=\"16\" markerHeight=\"16\" refX=\"8\" refY=\"8\" orient=\"auto\">\n            <line x1=\"8\" y1=\"8\" x2=\"2\" y2=\"4\" stroke=\"#64748B\" strokeWidth=\"2\" />\n            <line x1=\"8\" y1=\"8\" x2=\"2\" y2=\"8\" stroke=\"#64748B\" strokeWidth=\"2\" />\n            <line x1=\"8\" y1=\"8\" x2=\"2\" y2=\"12\" stroke=\"#64748B\" strokeWidth=\"2\" />\n          </marker>\n        </defs>\n        \n        <g transform={`translate(${panOffset.x}, ${panOffset.y}) scale(${zoom})`} style={{ pointerEvents: 'auto' }}>\n          {renderRelationshipLines()}\n        </g>\n      </svg>\n\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          transform: `translate(${panOffset.x}px, ${panOffset.y}px) scale(${zoom})`,\n          transformOrigin: '0 0',\n          transition: 'transform 0.2s ease-out',\n          zIndex: 2,\n        }}\n      >\n        {entities.map((entity) => {\n          const isMatch = hasSearchQuery && matchingEntities.some(e => e.id === entity.id);\n          const shouldDim = hasSearchQuery && !isMatch;\n\n          return (\n            <EntityNode\n              key={entity.id}\n              entity={entity}\n              isSelected={selectedEntityId === entity.id}\n              isSearchMatch={isMatch}\n              dimmed={shouldDim}\n              onSelect={() => onSelectEntity(entity.id)}\n              onDragStart={(e) => handleEntityDragStart(entity.id, e)}\n              onDrag={handleEntityDrag}\n              onDragEnd={handleEntityDragEnd}\n              onDoubleClick={() => onEntityDoubleClick(entity.id)}\n              onGenerateDLO={onGenerateDLO}\n              onGenerateDMO={onGenerateDMO}\n              style={{\n                left: entity.position?.x || 100,\n                top: entity.position?.y || 100,\n              }}\n            />\n          );\n        })}\n      </div>\n\n      {/* Zoom Controls */}\n      <div className=\"absolute top-4 right-4 bg-white shadow-lg rounded-lg p-2 flex flex-col gap-1 z-10\">\n        <Button size=\"sm\" onClick={handleZoomIn} data-testid=\"button-zoom-in\">\n          <Plus className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"text-xs text-center font-mono\" data-testid=\"text-zoom-level\">\n          {Math.round(zoom * 100)}%\n        </div>\n        <Button size=\"sm\" onClick={handleZoomOut} data-testid=\"button-zoom-out\">\n          <Minus className=\"h-4 w-4\" />\n        </Button>\n        <Separator />\n        <Button size=\"sm\" onClick={handleFitToScreen} title=\"Fit to Screen\" data-testid=\"button-fit-screen\">\n          <Maximize2 className=\"h-4 w-4\" />\n        </Button>\n        <Button size=\"sm\" onClick={handleResetView} title=\"Reset View\" data-testid=\"button-reset-view\">\n          <RotateCcw className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Search Results Panel */}\n      {matchingEntities.length > 0 && searchQuery && (\n        <div className=\"absolute top-4 left-4 bg-white shadow-lg rounded-lg p-3 w-80 z-10\" data-testid=\"search-results-panel\">\n          <div className=\"text-sm font-semibold mb-2 text-coolgray-600\">\n            Found {matchingEntities.length} {matchingEntities.length === 1 ? 'entity' : 'entities'}\n          </div>\n          <div className=\"space-y-1 max-h-64 overflow-y-auto\">\n            {matchingEntities.map(entity => (\n              <div\n                key={entity.id}\n                className=\"p-2 hover:bg-coolgray-50 rounded cursor-pointer flex items-center justify-between\"\n                onClick={() => centerOnEntity(entity.id)}\n                data-testid={`search-result-${entity.id}`}\n              >\n                <div>\n                  <div className=\"font-medium text-sm text-coolgray-600\">{entity.name}</div>\n                  <div className=\"text-xs text-coolgray-500\">\n                    {entity.dataSource || 'No source'}\n                  </div>\n                </div>\n                <Button size=\"sm\" variant=\"ghost\">\n                  <Target className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {entities.length === 0 && (\n        <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n          <div className=\"text-center\">\n            <p className=\"text-xl font-semibold text-coolgray-400\">No entities yet</p>\n            <p className=\"text-sm text-coolgray-500 mt-2\">Click the + button to add your first entity</p>\n          </div>\n        </div>\n      )}\n\n      {/* Legend */}\n      <div className=\"absolute bottom-4 right-4 bg-white shadow-lg rounded-lg p-4 w-72 z-10\" data-testid=\"legend-panel\">\n        <div className=\"text-sm font-semibold mb-3 text-coolgray-600\">Legend</div>\n        \n        {/* Entity Types */}\n        <div className=\"mb-3\">\n          <div className=\"text-xs font-medium text-coolgray-500 mb-2\">Entity Types</div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded bg-blue-100 border border-blue-400\"></div>\n              <span className=\"text-xs text-coolgray-600\">Data Stream (Ingestion)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded bg-green-100 border border-green-500\"></div>\n              <span className=\"text-xs text-coolgray-600\">DLO (Raw Data)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 rounded bg-orange-100 border border-orange-500\"></div>\n              <span className=\"text-xs text-coolgray-600\">DMO (Unified Model)</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Relationships */}\n        <div>\n          <div className=\"text-xs font-medium text-coolgray-500 mb-2\">Relationships</div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <svg width=\"50\" height=\"4\" className=\"flex-shrink-0\">\n                <line x1=\"0\" y1=\"2\" x2=\"50\" y2=\"2\" stroke=\"#4AA0D9\" strokeWidth=\"4\" />\n                <circle cx=\"10\" cy=\"2\" r=\"2\" fill=\"#4AA0D9\" opacity=\"0.6\" />\n              </svg>\n              <span className=\"text-xs text-coolgray-600\">Ingests (Data Stream → DLO)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg width=\"50\" height=\"2\" className=\"flex-shrink-0\">\n                <line x1=\"0\" y1=\"1\" x2=\"50\" y2=\"1\" stroke=\"#BED163\" strokeWidth=\"2\" strokeDasharray=\"8,4\" />\n              </svg>\n              <span className=\"text-xs text-coolgray-600\">Transforms (field lineage)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <svg width=\"50\" height=\"2\" className=\"flex-shrink-0\">\n                <line x1=\"0\" y1=\"1\" x2=\"50\" y2=\"1\" stroke=\"#64748B\" strokeWidth=\"2\" />\n              </svg>\n              <span className=\"text-xs text-coolgray-600\">References (FK)</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19325},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/EntityModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, Plus, Trash2, Key, Link as LinkIcon, Lock, Eye, EyeOff, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { Entity, Field, FieldType, EntityType, Cardinality, DataSource } from \"@shared/schema\";\nimport { getEntityTypeLabel } from \"@/lib/dataCloudStyles\";\n\ninterface EntityModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  entity: Entity | null;\n  entities: Entity[];\n  dataSources: DataSource[];\n  onSave: (entity: Partial<Entity>) => void;\n  onCreateDataSource: (dataSource: Partial<DataSource>) => void;\n}\n\nexport default function EntityModal({ isOpen, onClose, entity, entities, dataSources, onSave, onCreateDataSource }: EntityModalProps) {\n  const [name, setName] = useState(\"\");\n  const [entityType, setEntityType] = useState<EntityType>(\"dmo\");\n  const [dataSource, setDataSource] = useState(\"\");\n  const [businessPurpose, setBusinessPurpose] = useState(\"\");\n  const [fields, setFields] = useState<Field[]>([]);\n  \n  // Data Cloud metadata\n  const [profileObjectType, setProfileObjectType] = useState<\"Profile\" | \"Engagement\" | \"Other\" | \"TBD\">(\"TBD\");\n  const [apiName, setApiName] = useState(\"\");\n  const [refreshType, setRefreshType] = useState<\"full\" | \"incremental\">(\"full\");\n  const [schedule, setSchedule] = useState<\"real-time\" | \"hourly\" | \"daily\" | \"weekly\" | \"custom\">(\"daily\");\n  const [dataSourceId, setDataSourceId] = useState(\"\");\n  const [sourceObjectName, setSourceObjectName] = useState(\"\");\n\n  useEffect(() => {\n    if (entity) {\n      setName(entity.name || \"\");\n      setEntityType(entity.type || \"dmo\");\n      setDataSource(entity.dataSource || \"\");\n      setBusinessPurpose(entity.businessPurpose || \"\");\n      setFields(entity.fields || []);\n      setProfileObjectType(entity.dataCloudMetadata?.profileObjectType || \"TBD\");\n      setApiName(entity.dataCloudMetadata?.apiName || \"\");\n      setRefreshType(entity.dataCloudMetadata?.streamConfig?.refreshType || \"full\");\n      setSchedule(entity.dataCloudMetadata?.streamConfig?.schedule || \"daily\");\n      setDataSourceId(entity.dataCloudMetadata?.streamConfig?.dataSourceId || \"\");\n      setSourceObjectName(entity.dataCloudMetadata?.streamConfig?.sourceObjectName || \"\");\n    } else {\n      setName(\"\");\n      setEntityType(\"dmo\");\n      setDataSource(\"\");\n      setBusinessPurpose(\"\");\n      setFields([]);\n      setProfileObjectType(\"TBD\");\n      setApiName(\"\");\n      setRefreshType(\"full\");\n      setSchedule(\"daily\");\n      setDataSourceId(\"\");\n      setSourceObjectName(\"\");\n    }\n  }, [entity, isOpen]);\n\n  const handleAddField = () => {\n    const newField: Field = {\n      id: `field-${Date.now()}`,\n      name: \"\",\n      type: \"string\",\n      isPK: false,\n      isFK: false,\n      visibleInERD: true,\n    };\n    setFields([...fields, newField]);\n  };\n\n  const handleRemoveField = (fieldId: string) => {\n    setFields(fields.filter(f => f.id !== fieldId));\n  };\n\n  const handleFieldChange = (fieldId: string, updates: Partial<Field>) => {\n    setFields(fields.map(f => f.id === fieldId ? { ...f, ...updates } : f));\n  };\n\n  const handleSave = () => {\n    const updatedEntity: Partial<Entity> = {\n      ...(entity?.id && { id: entity.id }),\n      name,\n      type: entityType,\n      dataSource,\n      businessPurpose,\n      fields,\n      dataCloudMetadata: {\n        ...(entityType === 'dmo' && { \n          profileObjectType,\n          objectType: 'DMO' as const,\n        }),\n        ...(entityType === 'dlo' && { \n          objectType: 'DLO' as const,\n        }),\n        ...(entityType === 'data-stream' && {\n          streamConfig: {\n            refreshType,\n            schedule,\n            dataSourceId: dataSourceId || undefined,\n            sourceObjectName,\n          },\n        }),\n        apiName: apiName || undefined,\n      },\n      ...(entity?.position && { position: entity.position }),\n      ...(entity?.sourceDataStreamId && { sourceDataStreamId: entity.sourceDataStreamId }),\n      ...(entity?.sourceDLOIds && { sourceDLOIds: entity.sourceDLOIds }),\n      ...(entity?.dataSourceId && { dataSourceId: entity.dataSourceId }),\n    };\n    onSave(updatedEntity);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col bg-white border-coolgray-200\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-coolgray-600\">\n            {entity ? 'Edit Entity' : 'Create New Entity'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-y-auto px-6 py-4 space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"entity-name\" className=\"text-sm font-medium text-coolgray-500\">\n                Entity Name *\n              </Label>\n              <Input\n                id=\"entity-name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"e.g., Customer, Order\"\n                className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                data-testid=\"input-entity-name\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"entity-type\" className=\"text-sm font-medium text-coolgray-500\">\n                Entity Type *\n              </Label>\n              <Select value={entityType} onValueChange={(value) => setEntityType(value as EntityType)}>\n                <SelectTrigger className=\"mt-1 border-coolgray-200\" data-testid=\"select-entity-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-white border-coolgray-200\">\n                  <SelectItem value=\"data-stream\">Data Stream (Ingestion)</SelectItem>\n                  <SelectItem value=\"dlo\">DLO (Data Lake Object)</SelectItem>\n                  <SelectItem value=\"dmo\">DMO (Data Model Object)</SelectItem>\n                  <SelectItem value=\"data-transform\">Data Transform</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {entityType === 'dmo' && (\n              <>\n                <div>\n                  <Label htmlFor=\"data-source\" className=\"text-sm font-medium text-coolgray-500\">\n                    Data Source\n                  </Label>\n                  <Input\n                    id=\"data-source\"\n                    value={dataSource}\n                    onChange={(e) => setDataSource(e.target.value)}\n                    placeholder=\"e.g., Salesforce Production\"\n                    className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                    data-testid=\"input-data-source\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"profile-object-type\" className=\"text-sm font-medium text-coolgray-500\">\n                    Profile Object Type\n                  </Label>\n                  <Select value={profileObjectType} onValueChange={(value: any) => setProfileObjectType(value)}>\n                    <SelectTrigger className=\"mt-1 border-coolgray-200\" data-testid=\"select-profile-object-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      <SelectItem value=\"Profile\">Profile</SelectItem>\n                      <SelectItem value=\"Engagement\">Engagement</SelectItem>\n                      <SelectItem value=\"Other\">Other</SelectItem>\n                      <SelectItem value=\"TBD\">TBD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </>\n            )}\n\n            {entityType === 'data-stream' && (\n              <>\n                <div>\n                  <Label htmlFor=\"data-source-select\" className=\"text-sm font-medium text-coolgray-500\">\n                    Data Source *\n                  </Label>\n                  <Select value={dataSourceId} onValueChange={(value) => setDataSourceId(value)}>\n                    <SelectTrigger className=\"mt-1 border-coolgray-200\" data-testid=\"select-data-source\">\n                      <SelectValue placeholder=\"Select data source...\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      {dataSources.map(ds => (\n                        <SelectItem key={ds.id} value={ds.id}>{ds.name} ({ds.type})</SelectItem>\n                      ))}\n                      {dataSources.length === 0 && (\n                        <div className=\"px-2 py-1.5 text-xs text-coolgray-400\">No data sources yet</div>\n                      )}\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-coolgray-400 mt-1\">\n                    Select the external system (Salesforce, Marketing Cloud, etc.)\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"source-object-name\" className=\"text-sm font-medium text-coolgray-500\">\n                    Source Object Name *\n                  </Label>\n                  <Input\n                    id=\"source-object-name\"\n                    value={sourceObjectName}\n                    onChange={(e) => setSourceObjectName(e.target.value)}\n                    placeholder=\"e.g., Account, Contact\"\n                    className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                    data-testid=\"input-source-object-name\"\n                  />\n                  <p className=\"text-xs text-coolgray-400 mt-1\">\n                    The table/object name from the selected data source\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"refresh-type\" className=\"text-sm font-medium text-coolgray-500\">\n                    Refresh Type\n                  </Label>\n                  <Select value={refreshType} onValueChange={(value: any) => setRefreshType(value)}>\n                    <SelectTrigger className=\"mt-1 border-coolgray-200\" data-testid=\"select-refresh-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      <SelectItem value=\"full\">Full</SelectItem>\n                      <SelectItem value=\"incremental\">Incremental</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"schedule\" className=\"text-sm font-medium text-coolgray-500\">\n                    Schedule\n                  </Label>\n                  <Select value={schedule} onValueChange={(value: any) => setSchedule(value)}>\n                    <SelectTrigger className=\"mt-1 border-coolgray-200\" data-testid=\"select-schedule\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      <SelectItem value=\"real-time\">Real-time</SelectItem>\n                      <SelectItem value=\"hourly\">Hourly</SelectItem>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"custom\">Custom</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"api-name\" className=\"text-sm font-medium text-coolgray-500\">\n                    API Name\n                  </Label>\n                  <Input\n                    id=\"api-name\"\n                    value={apiName}\n                    onChange={(e) => setApiName(e.target.value)}\n                    placeholder=\"e.g., Account_Stream\"\n                    className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                    data-testid=\"input-api-name\"\n                  />\n                </div>\n              </>\n            )}\n\n            {(entityType === 'dlo' || entityType === 'dmo') && (\n              <div>\n                <Label htmlFor=\"api-name\" className=\"text-sm font-medium text-coolgray-500\">\n                  API Name\n                </Label>\n                <Input\n                  id=\"api-name\"\n                  value={apiName}\n                  onChange={(e) => setApiName(e.target.value)}\n                  placeholder={`e.g., ${name.replace(/\\s+/g, '_')}_${entityType.toUpperCase()}`}\n                  className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                  data-testid=\"input-api-name\"\n                />\n              </div>\n            )}\n          </div>\n\n          {entityType === 'dmo' && (\n            <div>\n              <Label htmlFor=\"business-purpose\" className=\"text-sm font-medium text-coolgray-500\">\n                Business Purpose\n              </Label>\n              <Textarea\n                id=\"business-purpose\"\n                value={businessPurpose}\n                onChange={(e) => setBusinessPurpose(e.target.value)}\n                placeholder=\"Describe the business purpose of this entity...\"\n                className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n                rows={2}\n                data-testid=\"textarea-business-purpose\"\n              />\n            </div>\n          )}\n\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Label className=\"text-sm font-medium text-coolgray-600\">Fields</Label>\n              <Button\n                onClick={handleAddField}\n                size=\"sm\"\n                className=\"bg-primary-500 hover:bg-primary-600 text-white rounded-lg\"\n                data-testid=\"button-add-field\"\n              >\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Add Field\n              </Button>\n            </div>\n\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {fields.map((field, index) => (\n                <FieldRow\n                  key={field.id}\n                  field={field}\n                  entities={entities}\n                  currentEntityId={entity?.id}\n                  currentEntityType={entityType}\n                  onUpdate={(updates) => handleFieldChange(field.id, updates)}\n                  onRemove={() => handleRemoveField(field.id)}\n                />\n              ))}\n              {fields.length === 0 && (\n                <div className=\"text-center py-8 text-coolgray-400 text-sm\">\n                  No fields yet. Click \"Add Field\" to create one.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-coolgray-200 px-6 py-4 flex justify-end gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            className=\"border-coolgray-200 text-coolgray-600\"\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={!name || fields.length === 0}\n            className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n            data-testid=\"button-save-entity\"\n          >\n            {entity ? 'Update Entity' : 'Create Entity'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface FieldRowProps {\n  field: Field;\n  entities: Entity[];\n  currentEntityId?: string;\n  currentEntityType: EntityType;\n  onUpdate: (updates: Partial<Field>) => void;\n  onRemove: () => void;\n}\n\nfunction FieldRow({ field, entities, currentEntityId, currentEntityType, onUpdate, onRemove }: FieldRowProps) {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [showFKConfig, setShowFKConfig] = useState(false);\n\n  const availableEntities = entities.filter(e => \n    e.id !== currentEntityId\n  );\n\n  return (\n    <div className=\"border border-coolgray-200 rounded-lg p-3 space-y-3 bg-coolgray-50\">\n      <div className=\"grid grid-cols-12 gap-2 items-start\">\n        <div className=\"col-span-3\">\n          <Input\n            value={field.name}\n            onChange={(e) => onUpdate({ name: e.target.value })}\n            placeholder=\"Field name\"\n            className=\"text-sm border-coolgray-200 font-mono\"\n            data-testid={`input-field-name-${field.id}`}\n          />\n        </div>\n\n        <div className=\"col-span-2\">\n          <Select value={field.type} onValueChange={(value) => onUpdate({ type: value as FieldType })}>\n            <SelectTrigger className=\"text-sm border-coolgray-200\" data-testid={`select-field-type-${field.id}`}>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white border-coolgray-200\">\n              <SelectItem value=\"string\">string</SelectItem>\n              <SelectItem value=\"text\">text</SelectItem>\n              <SelectItem value=\"int\">int</SelectItem>\n              <SelectItem value=\"float\">float</SelectItem>\n              <SelectItem value=\"boolean\">boolean</SelectItem>\n              <SelectItem value=\"date\">date</SelectItem>\n              <SelectItem value=\"datetime\">datetime</SelectItem>\n              <SelectItem value=\"uuid\">uuid</SelectItem>\n              <SelectItem value=\"email\">email</SelectItem>\n              <SelectItem value=\"phone\">phone</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"col-span-6 flex items-center gap-2\">\n          <label className=\"flex items-center gap-1 text-xs text-coolgray-600\">\n            <Checkbox\n              checked={field.isPK}\n              onCheckedChange={(checked) => onUpdate({ isPK: checked as boolean })}\n              data-testid={`checkbox-pk-${field.id}`}\n            />\n            <Key className=\"h-3 w-3 text-primary-500\" />\n            PK\n          </label>\n          <label className=\"flex items-center gap-1 text-xs text-coolgray-600\">\n            <Checkbox\n              checked={field.isFK}\n              onCheckedChange={(checked) => {\n                onUpdate({ isFK: checked as boolean });\n                if (checked) setShowFKConfig(true);\n              }}\n              data-testid={`checkbox-fk-${field.id}`}\n            />\n            <LinkIcon className=\"h-3 w-3 text-secondary-500\" />\n            FK\n          </label>\n          <label className=\"flex items-center gap-1 text-xs text-coolgray-600\">\n            <Checkbox\n              checked={field.containsPII}\n              onCheckedChange={(checked) => onUpdate({ containsPII: checked as boolean })}\n              data-testid={`checkbox-pii-${field.id}`}\n            />\n            <Lock className=\"h-3 w-3 text-warning-500\" />\n            PII\n          </label>\n          <label className=\"flex items-center gap-1 text-xs text-coolgray-600\">\n            <Checkbox\n              checked={field.visibleInERD !== false}\n              onCheckedChange={(checked) => onUpdate({ visibleInERD: checked as boolean })}\n              data-testid={`checkbox-visible-erd-${field.id}`}\n            />\n            {field.visibleInERD !== false ? (\n              <Eye className=\"h-3 w-3 text-secondary-500\" />\n            ) : (\n              <EyeOff className=\"h-3 w-3 text-coolgray-400\" />\n            )}\n            ERD\n          </label>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowAdvanced(!showAdvanced)}\n            className=\"text-xs text-secondary-500 hover:text-secondary-600\"\n          >\n            {showAdvanced ? 'Less' : 'More'}\n          </Button>\n        </div>\n\n        <div className=\"col-span-1 flex justify-end\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onRemove}\n            className=\"text-danger-500 hover:text-danger-700 hover:bg-danger-50\"\n            data-testid={`button-remove-field-${field.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {field.isFK && (\n        <div className=\"pt-2 border-t border-coolgray-200\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowFKConfig(!showFKConfig)}\n            className=\"text-xs text-secondary-600 hover:text-secondary-700 w-full justify-between\"\n            data-testid={`button-toggle-fk-config-${field.id}`}\n          >\n            <span className=\"flex items-center gap-1\">\n              <LinkIcon className=\"h-3 w-3\" />\n              Foreign Key Configuration\n            </span>\n            {showFKConfig ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n          </Button>\n          \n          {showFKConfig && (\n            <div className=\"space-y-2 mt-2 bg-secondary-50/50 p-3 rounded\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label className=\"text-xs text-coolgray-600\">Target Entity *</Label>\n                  <Select\n                    value={field.fkReference?.targetEntityId || \"\"}\n                    onValueChange={(value) => {\n                      onUpdate({\n                        fkReference: {\n                          targetEntityId: value,\n                          targetFieldId: \"\",\n                          cardinality: field.fkReference?.cardinality || \"many-to-one\",\n                          relationshipLabel: field.fkReference?.relationshipLabel,\n                        }\n                      });\n                    }}\n                  >\n                    <SelectTrigger className=\"text-sm border-coolgray-200 bg-white\" data-testid={`select-target-entity-${field.id}`}>\n                      <SelectValue placeholder=\"Select entity...\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      {availableEntities.map(e => (\n                        <SelectItem key={e.id} value={e.id}>{e.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-xs text-coolgray-600\">Target Field *</Label>\n                  <Select\n                    value={field.fkReference?.targetFieldId || \"\"}\n                    onValueChange={(value) => {\n                      onUpdate({\n                        fkReference: {\n                          ...field.fkReference!,\n                          targetFieldId: value,\n                        }\n                      });\n                    }}\n                    disabled={!field.fkReference?.targetEntityId}\n                  >\n                    <SelectTrigger className=\"text-sm border-coolgray-200 bg-white\" data-testid={`select-target-field-${field.id}`}>\n                      <SelectValue placeholder=\"Select field...\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      {field.fkReference?.targetEntityId &&\n                        entities\n                          .find(e => e.id === field.fkReference?.targetEntityId)\n                          ?.fields.filter(f => f.isPK)\n                          .map(f => (\n                            <SelectItem key={f.id} value={f.id}>{f.name}</SelectItem>\n                          ))\n                      }\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-xs text-coolgray-600\">Cardinality</Label>\n                  <Select\n                    value={field.fkReference?.cardinality || \"many-to-one\"}\n                    onValueChange={(value) => {\n                      onUpdate({\n                        fkReference: {\n                          ...field.fkReference!,\n                          cardinality: value as Cardinality,\n                        }\n                      });\n                    }}\n                  >\n                    <SelectTrigger className=\"text-sm border-coolgray-200 bg-white\" data-testid={`select-cardinality-${field.id}`}>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border-coolgray-200\">\n                      <SelectItem value=\"one-to-one\">One-to-One (1:1)</SelectItem>\n                      <SelectItem value=\"one-to-many\">One-to-Many (1:M)</SelectItem>\n                      <SelectItem value=\"many-to-one\">Many-to-One (M:1)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-xs text-coolgray-600\">Relationship Label</Label>\n                  <Input\n                    value={field.fkReference?.relationshipLabel || \"\"}\n                    onChange={(e) => {\n                      onUpdate({\n                        fkReference: {\n                          ...field.fkReference!,\n                          relationshipLabel: e.target.value,\n                        }\n                      });\n                    }}\n                    placeholder=\"e.g., owns, belongs to\"\n                    className=\"text-sm border-coolgray-200 bg-white\"\n                    data-testid={`input-relationship-label-${field.id}`}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {showAdvanced && (\n        <div className=\"space-y-2 pt-2 border-t border-coolgray-200\">\n          <Input\n            value={field.businessName || \"\"}\n            onChange={(e) => onUpdate({ businessName: e.target.value })}\n            placeholder=\"Business name\"\n            className=\"text-sm border-coolgray-200\"\n            data-testid={`input-business-name-${field.id}`}\n          />\n          <Textarea\n            value={field.notes || \"\"}\n            onChange={(e) => onUpdate({ notes: e.target.value })}\n            placeholder=\"Notes\"\n            className=\"text-sm border-coolgray-200\"\n            rows={2}\n            data-testid={`textarea-notes-${field.id}`}\n          />\n          <div>\n            <Label className=\"text-xs text-coolgray-600\">Sample Values (pipe-separated)</Label>\n            <Input\n              value={field.sampleValues?.join(\" | \") || \"\"}\n              onChange={(e) => {\n                const values = e.target.value\n                  .split(\"|\")\n                  .map(v => v.trim())\n                  .filter(v => v);\n                onUpdate({ sampleValues: values.length > 0 ? values : undefined });\n              }}\n              placeholder=\"e.g., value1 | value2 | value3\"\n              className=\"text-sm border-coolgray-200 mt-1\"\n              data-testid={`input-sample-values-${field.id}`}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":27383},"client/src/components/ProjectDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { Project } from \"@shared/schema\";\n\ninterface ProjectDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  project: Project | null;\n  onSave: (data: { name: string; clientName?: string; consultant?: string }) => void;\n  title: string;\n}\n\nexport default function ProjectDialog({ isOpen, onClose, project, onSave, title }: ProjectDialogProps) {\n  const [name, setName] = useState(project?.name || \"\");\n  const [clientName, setClientName] = useState(project?.clientName || \"\");\n  const [consultant, setConsultant] = useState(project?.consultant || \"\");\n\n  const handleSave = () => {\n    if (!name.trim()) return;\n    onSave({ name, clientName, consultant });\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md bg-white border-coolgray-200\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-coolgray-600\">{title}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div>\n            <Label htmlFor=\"project-name\" className=\"text-sm font-medium text-coolgray-500\">\n              Project Name *\n            </Label>\n            <Input\n              id=\"project-name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., Acme Corp Data Cloud Implementation\"\n              className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n              data-testid=\"input-project-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"client-name\" className=\"text-sm font-medium text-coolgray-500\">\n              Client Name\n            </Label>\n            <Input\n              id=\"client-name\"\n              value={clientName}\n              onChange={(e) => setClientName(e.target.value)}\n              placeholder=\"e.g., Acme Corporation\"\n              className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n              data-testid=\"input-client-name\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"consultant\" className=\"text-sm font-medium text-coolgray-500\">\n              Consultant\n            </Label>\n            <Input\n              id=\"consultant\"\n              value={consultant}\n              onChange={(e) => setConsultant(e.target.value)}\n              placeholder=\"e.g., John Smith\"\n              className=\"mt-1 border-coolgray-200 focus:border-secondary-500\"\n              data-testid=\"input-consultant\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t border-coolgray-200\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            className=\"border-coolgray-200 text-coolgray-600\"\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={!name.trim()}\n            className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n            data-testid=\"button-save\"\n          >\n            {project ? 'Update' : 'Create'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3463},"client/src/lib/dataCloudStyles.ts":{"content":"import type { EntityType, RelationshipType } from \"@shared/schema\";\n\nexport interface EntityCardStyle {\n  background: string;\n  borderColor: string;\n  icon: string;\n  badge: {\n    text: string;\n    color: 'primary' | 'secondary' | 'tertiary' | 'neutral';\n  };\n}\n\nexport interface RelationshipLineStyle {\n  stroke: string;\n  strokeWidth: number;\n  strokeDasharray: string;\n  animated?: boolean;\n  label: string;\n}\n\nexport function getEntityCardStyle(type: EntityType): EntityCardStyle {\n  const styles: Record<EntityType, EntityCardStyle> = {\n    'data-source': {\n      background: '#F8FAFC',\n      borderColor: '#94A3B8',\n      icon: 'Database',\n      badge: { text: 'Data Source', color: 'neutral' },\n    },\n    'data-stream': {\n      background: '#E6F3FB',\n      borderColor: '#4AA0D9',\n      icon: 'Waves',\n      badge: { text: 'Data Stream', color: 'secondary' },\n    },\n    'dlo': {\n      background: '#F9FCEA',\n      borderColor: '#BED163',\n      icon: 'Cylinder',\n      badge: { text: 'DLO', color: 'tertiary' },\n    },\n    'dmo': {\n      background: '#FFF6EB',\n      borderColor: '#E49A43',\n      icon: 'Layers',\n      badge: { text: 'DMO', color: 'primary' },\n    },\n    'data-transform': {\n      background: '#F5F3FF',\n      borderColor: '#A78BFA',\n      icon: 'Sparkles',\n      badge: { text: 'Transform', color: 'neutral' },\n    },\n  };\n\n  return styles[type];\n}\n\nexport function getRelationshipLineStyle(type: RelationshipType): RelationshipLineStyle {\n  const styles: Record<RelationshipType, RelationshipLineStyle> = {\n    'feeds-into': {\n      stroke: '#4AA0D9',\n      strokeWidth: 3,\n      strokeDasharray: 'none',\n      animated: true,\n      label: 'Ingests',\n    },\n    'transforms-to': {\n      stroke: '#BED163',\n      strokeWidth: 3,\n      strokeDasharray: '8,4',\n      animated: false,\n      label: 'Transforms',\n    },\n    'references': {\n      stroke: '#64748B',\n      strokeWidth: 2,\n      strokeDasharray: 'none',\n      animated: false,\n      label: 'FK',\n    },\n  };\n\n  return styles[type];\n}\n\nexport function getEntityTypeLabel(type: EntityType): string {\n  const labels: Record<EntityType, string> = {\n    'data-source': 'Data Source',\n    'data-stream': 'Data Stream',\n    'dlo': 'Data Lake Object (DLO)',\n    'dmo': 'Data Model Object (DMO)',\n    'data-transform': 'Data Transform',\n  };\n\n  return labels[type];\n}\n\nexport function getRelationshipTypeLabel(type: RelationshipType): string {\n  const labels: Record<RelationshipType, string> = {\n    'feeds-into': 'Feeds Into (Ingests)',\n    'transforms-to': 'Transforms To',\n    'references': 'References (FK)',\n  };\n\n  return labels[type];\n}\n","size_bytes":2622},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"replit.md":{"content":"# Schema Builder - Data Discovery Tool\n\n## Overview\n\nSchema Builder is a web-based data discovery and documentation tool designed for Salesforce Data Cloud consultants. The application helps consultants map client data sources, define entity relationships, and generate deliverables by providing a single source of truth where updates propagate across ERD diagrams, data dictionaries, and documentation.\n\nThe tool replaces the need to juggle separate tools (Lucidchart for ERDs, Excel for data dictionaries, Word for blueprints) with a unified interface that maintains consistency across all views and exports.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Core Technologies:**\n- React 18+ with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management\n- React Context API with custom hooks for local state management\n\n**UI Component System:**\n- shadcn/ui component library built on Radix UI primitives\n- Tailwind CSS for styling with a custom design system\n- Design follows a \"system-based approach\" prioritizing efficiency and data clarity over visual flair\n- Custom color palette with strict usage rules (Primary Orange for CTAs, Secondary Blue for navigation, utility colors for status indicators)\n- Typography system using Inter for UI text and JetBrains Mono for technical/code content\n- Spacing based on a 4px base unit system\n\n**State Management Pattern:**\n- Repository pattern for data persistence using localStorage\n- Designed to support future backend swap without major refactoring\n- All project data, entities, and source systems stored in browser localStorage\n- State synchronized across multiple views (Graph View and Table View)\n\n**Key UI Features:**\n- Dual-view system: Graph View (visual ERD) and Table/List View (detailed, scannable)\n- Interactive entity relationship diagram with zoom, pan, and drag capabilities\n- Real-time search and filtering across entities, fields, and source systems\n- Modal-based editing for entities, fields, and metadata\n- Export capabilities for JSON, ERD diagrams, and data dictionaries\n\n### Backend Architecture\n\n**Server Setup:**\n- Express.js server with TypeScript\n- Development mode uses Vite middleware for HMR and asset serving\n- Production mode serves static built assets\n- Modular route registration system (currently minimal implementation)\n\n**Data Storage Interface:**\n- Abstract `IStorage` interface for CRUD operations\n- Initial implementation uses in-memory storage (`MemStorage`)\n- Designed to be swapped with database-backed storage (Drizzle ORM configuration present)\n- Session management prepared with `connect-pg-simple` for PostgreSQL sessions\n\n**Database Configuration:**\n- Drizzle ORM configured for PostgreSQL dialect\n- Schema definitions in `shared/schema.ts` using Zod for validation\n- Database credentials expected via `DATABASE_URL` environment variable\n- Migration support configured in `drizzle.config.ts`\n\n### Data Models & Schema\n\n**Core Entities:**\n- **Project**: Top-level container for client implementation work (name, client info, consultant, timestamps)\n- **SourceSystem**: Represents data sources (Salesforce, database, API, CSV, ERP, marketing tools, custom)\n- **Entity**: Represents tables/objects with fields, business purpose, Data Cloud object type mapping\n- **Field**: Individual data fields with type, constraints (PK/FK), PII flags, business names, sample values\n\n**Relationship Modeling:**\n- Foreign key references with cardinality (one-to-one, one-to-many, many-to-one)\n- Relationship labels for ERD visualization\n- Support for complex multi-source data relationships\n\n**Field Types:**\n- Comprehensive type system: string, text, int, float, number, decimal, boolean, date, datetime, timestamp, json, jsonb, uuid, enum, phone, email\n\n**Data Cloud Integration:**\n- Object type classification: Profile, Engagement, Other, TBD\n- Implementation status tracking: not-started, in-progress, completed\n\n### External Dependencies\n\n**UI Component Libraries:**\n- Radix UI primitives for accessible, unstyled components (accordion, dialog, dropdown, popover, select, tabs, toast, tooltip, etc.)\n- Lucide React for iconography\n- class-variance-authority and clsx for conditional styling utilities\n\n**Data Processing:**\n- PapaParse for CSV file parsing and import\n- jsPDF or html2pdf.js for PDF generation (exports)\n- Mermaid for ERD rendering (mentioned in spec, not yet in package.json)\n\n**Development & Build Tools:**\n- TypeScript for type safety across frontend and backend\n- ESBuild for server-side bundling\n- PostCSS with Tailwind CSS and Autoprefixer\n- tsx for running TypeScript in development\n\n**Database & ORM:**\n- Drizzle ORM for database interactions\n- @neondatabase/serverless for PostgreSQL connections\n- Drizzle Zod for schema validation integration\n\n**Form Management:**\n- React Hook Form for form state management\n- @hookform/resolvers with Zod for validation\n\n**Utilities:**\n- date-fns for date manipulation\n- nanoid for generating unique IDs\n- uuid for RFC-compliant unique identifiers\n\n**Future Integrations:**\n- Backend database (PostgreSQL via Neon or similar)\n- CSV import/export functionality\n- JSON import/export for project backup/restore\n- PDF generation for data dictionaries and ERD documentation\n- Potential Mermaid integration for enhanced ERD rendering","size_bytes":5505},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/Toolbar.tsx":{"content":"import { LayoutGrid, Table, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { FieldType } from \"@shared/schema\";\n\ntype ViewMode = 'graph' | 'table';\n\ninterface ToolbarProps {\n  viewMode: ViewMode;\n  onViewModeChange: (mode: ViewMode) => void;\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  typeFilter: FieldType | 'all';\n  onTypeFilterChange: (type: FieldType | 'all') => void;\n}\n\nexport default function Toolbar({\n  viewMode,\n  onViewModeChange,\n  searchQuery,\n  onSearchChange,\n  typeFilter,\n  onTypeFilterChange,\n}: ToolbarProps) {\n  return (\n    <div className=\"bg-white border-b border-coolgray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex bg-coolgray-100 rounded-lg p-1\">\n            <Button\n              variant={viewMode === 'graph' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onViewModeChange('graph')}\n              className={viewMode === 'graph' \n                ? \"bg-secondary-500 text-white hover:bg-secondary-600\" \n                : \"text-coolgray-600 hover:bg-coolgray-200\"}\n              data-testid=\"button-view-graph\"\n            >\n              <LayoutGrid className=\"h-4 w-4 mr-2\" />\n              Graph View\n            </Button>\n            <Button\n              variant={viewMode === 'table' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onViewModeChange('table')}\n              className={viewMode === 'table' \n                ? \"bg-secondary-500 text-white hover:bg-secondary-600\" \n                : \"text-coolgray-600 hover:bg-coolgray-200\"}\n              data-testid=\"button-view-table\"\n            >\n              <Table className=\"h-4 w-4 mr-2\" />\n              Table View\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-3 flex-1 max-w-3xl\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-coolgray-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search entities or fields...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-10 border-coolgray-200 focus:border-secondary-500 focus:ring-1 focus:ring-secondary-500\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2607},"client/src/components/RelationshipLine.tsx":{"content":"import { useState } from \"react\";\nimport type { Entity, Field, Cardinality } from \"@shared/schema\";\n\ninterface RelationshipLineProps {\n  sourceEntity: Entity;\n  targetEntity: Entity;\n  field: Field;\n  zoom: number;\n  panOffset: { x: number; y: number };\n  onUpdateWaypoints: (fieldId: string, waypoints: { x: number; y: number }[]) => void;\n}\n\nexport default function RelationshipLine({\n  sourceEntity,\n  targetEntity,\n  field,\n  zoom,\n  panOffset,\n  onUpdateWaypoints,\n}: RelationshipLineProps) {\n  const [draggedWaypointIndex, setDraggedWaypointIndex] = useState<number | null>(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const sourcePos = sourceEntity.position || { x: 100, y: 100 };\n  const targetPos = targetEntity.position || { x: 400, y: 100 };\n\n  // Entity card dimensions\n  const ENTITY_WIDTH = 320;\n  const HEADER_HEIGHT = 52; // Header with name and badge\n  const METADATA_HEIGHT = 36; // Metadata row\n  const FIELD_HEIGHT = 28; // Approximate height per field\n  const PADDING_TOP = HEADER_HEIGHT + METADATA_HEIGHT;\n  \n  const GRID_SIZE = 20;\n\n  // Calculate Y position for the source field (FK field)\n  const sourceFieldIndex = sourceEntity.fields.filter(f => f.visibleInERD !== false).findIndex(f => f.id === field.id);\n  const sourceFieldY = sourcePos.y + PADDING_TOP + (sourceFieldIndex * FIELD_HEIGHT) + (FIELD_HEIGHT / 2);\n\n  // Calculate Y position for the target field (PK field)\n  const targetFieldId = field.fkReference?.targetFieldId;\n  const targetFieldIndex = targetEntity.fields.filter(f => f.visibleInERD !== false).findIndex(f => f.id === targetFieldId);\n  const targetFieldY = targetPos.y + PADDING_TOP + (targetFieldIndex * FIELD_HEIGHT) + (FIELD_HEIGHT / 2);\n\n  // Connect from right edge of source to left edge of target\n  const startX = sourcePos.x + ENTITY_WIDTH; // Right edge\n  const startY = sourceFieldY >= 0 ? sourceFieldY : sourcePos.y + PADDING_TOP;\n  const endX = targetPos.x;         // Left edge of target\n  const endY = targetFieldY >= 0 ? targetFieldY : targetPos.y + PADDING_TOP;\n\n  const waypoints = field.fkReference?.waypoints || [];\n  const cardinality = field.fkReference?.cardinality || 'many-to-one';\n\n  // Create orthogonal path (Manhattan routing)\n  const createPath = () => {\n    if (waypoints.length === 0) {\n      // Default orthogonal routing: horizontal -> vertical -> horizontal\n      const midX = (startX + endX) / 2;\n      return `M ${startX} ${startY} L ${midX} ${startY} L ${midX} ${endY} L ${endX} ${endY}`;\n    }\n\n    let path = `M ${startX} ${startY}`;\n    \n    // First segment: horizontal to first waypoint's X\n    path += ` L ${waypoints[0].x} ${startY}`;\n    \n    // Then vertical to first waypoint's Y\n    path += ` L ${waypoints[0].x} ${waypoints[0].y}`;\n    \n    // Connect through waypoints with orthogonal segments\n    for (let i = 1; i < waypoints.length; i++) {\n      const prevWp = waypoints[i - 1];\n      const currWp = waypoints[i];\n      \n      // Alternate between horizontal and vertical segments\n      if (i % 2 === 1) {\n        // Horizontal then vertical\n        path += ` L ${currWp.x} ${prevWp.y}`;\n        path += ` L ${currWp.x} ${currWp.y}`;\n      } else {\n        // Vertical then horizontal\n        path += ` L ${prevWp.x} ${currWp.y}`;\n        path += ` L ${currWp.x} ${currWp.y}`;\n      }\n    }\n    \n    // Final segments to end point\n    const lastWp = waypoints[waypoints.length - 1];\n    if (waypoints.length % 2 === 1) {\n      // Horizontal then vertical\n      path += ` L ${endX} ${lastWp.y}`;\n      path += ` L ${endX} ${endY}`;\n    } else {\n      // Vertical then horizontal\n      path += ` L ${lastWp.x} ${endY}`;\n      path += ` L ${endX} ${endY}`;\n    }\n    \n    return path;\n  };\n\n  const handleWaypointMouseDown = (index: number, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setDraggedWaypointIndex(index);\n  };\n\n  const handleWaypointMouseMove = (e: MouseEvent) => {\n    if (draggedWaypointIndex === null) return;\n\n    // Calculate position with snap-to-grid\n    const rawX = (e.clientX - panOffset.x) / zoom;\n    const rawY = (e.clientY - panOffset.y) / zoom;\n    \n    const newWaypoints = [...waypoints];\n    newWaypoints[draggedWaypointIndex] = {\n      x: Math.round(rawX / GRID_SIZE) * GRID_SIZE,\n      y: Math.round(rawY / GRID_SIZE) * GRID_SIZE,\n    };\n    onUpdateWaypoints(field.id, newWaypoints);\n  };\n\n  const handleWaypointMouseUp = () => {\n    setDraggedWaypointIndex(null);\n  };\n\n  const handleLineClick = (e: React.MouseEvent) => {\n    if (e.detail === 2) return; // Ignore double clicks\n\n    // Add waypoint at click position with snap-to-grid\n    const rect = (e.currentTarget as SVGElement).getBoundingClientRect();\n    const rawX = (e.clientX - rect.left - panOffset.x) / zoom;\n    const rawY = (e.clientY - rect.top - panOffset.y) / zoom;\n\n    const snappedX = Math.round(rawX / GRID_SIZE) * GRID_SIZE;\n    const snappedY = Math.round(rawY / GRID_SIZE) * GRID_SIZE;\n\n    const newWaypoints = [...waypoints, { x: snappedX, y: snappedY }];\n    onUpdateWaypoints(field.id, newWaypoints);\n  };\n\n  const handleWaypointDoubleClick = (index: number, e: React.MouseEvent) => {\n    e.stopPropagation();\n    const newWaypoints = waypoints.filter((_, i) => i !== index);\n    onUpdateWaypoints(field.id, newWaypoints);\n  };\n\n  // Determine crow's foot markers based on cardinality\n  let markerStart = '';\n  let markerEnd = '';\n  let cardinalityLabel = '';\n\n  switch (cardinality) {\n    case 'one-to-one':\n      markerStart = 'url(#cf-one)';\n      markerEnd = 'url(#cf-one)';\n      cardinalityLabel = '1:1';\n      break;\n    case 'one-to-many':\n      markerStart = 'url(#cf-one)';\n      markerEnd = 'url(#cf-many)';\n      cardinalityLabel = '1:M';\n      break;\n    case 'many-to-one':\n      markerStart = 'url(#cf-many)';\n      markerEnd = 'url(#cf-one)';\n      cardinalityLabel = 'M:1';\n      break;\n  }\n\n  const pathData = createPath();\n  \n  // For orthogonal routing, we need to draw markers separately at the correct positions\n  // because SVG markers don't always orient correctly with multi-segment paths\n  const drawStartMarker = () => {\n    const markerSize = 12;\n    if (cardinality === 'one-to-one' || cardinality === 'one-to-many') {\n      // Draw \"one\" marker - single line\n      return (\n        <line \n          x1={startX} \n          y1={startY - markerSize/2} \n          x2={startX} \n          y2={startY + markerSize/2} \n          stroke=\"#64748B\" \n          strokeWidth=\"2\" \n        />\n      );\n    } else {\n      // Draw \"many\" marker - crow's foot\n      return (\n        <g>\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY - markerSize/2} stroke=\"#64748B\" strokeWidth=\"2\" />\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY} stroke=\"#64748B\" strokeWidth=\"2\" />\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY + markerSize/2} stroke=\"#64748B\" strokeWidth=\"2\" />\n        </g>\n      );\n    }\n  };\n  \n  const drawEndMarker = () => {\n    const markerSize = 12;\n    if (cardinality === 'one-to-one' || cardinality === 'many-to-one') {\n      // Draw \"one\" marker - single line\n      return (\n        <line \n          x1={endX} \n          y1={endY - markerSize/2} \n          x2={endX} \n          y2={endY + markerSize/2} \n          stroke=\"#64748B\" \n          strokeWidth=\"2\" \n        />\n      );\n    } else {\n      // Draw \"many\" marker - crow's foot\n      return (\n        <g>\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY - markerSize/2} stroke=\"#64748B\" strokeWidth=\"2\" />\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY} stroke=\"#64748B\" strokeWidth=\"2\" />\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY + markerSize/2} stroke=\"#64748B\" strokeWidth=\"2\" />\n        </g>\n      );\n    }\n  };\n  \n  // Calculate midpoint for label\n  const midX = waypoints.length > 0 \n    ? waypoints[Math.floor(waypoints.length / 2)].x \n    : (startX + endX) / 2;\n  const midY = waypoints.length > 0 \n    ? waypoints[Math.floor(waypoints.length / 2)].y \n    : (startY + endY) / 2;\n\n  return (\n    <g\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* Invisible thick line for easier clicking */}\n      <path\n        d={pathData}\n        stroke=\"transparent\"\n        strokeWidth=\"12\"\n        fill=\"none\"\n        onClick={handleLineClick}\n        style={{ cursor: 'pointer' }}\n      />\n\n      {/* Visible line */}\n      <path\n        d={pathData}\n        stroke={isHovered ? \"#3b82f6\" : \"#64748B\"}\n        strokeWidth={isHovered ? \"3\" : \"2\"}\n        fill=\"none\"\n        style={{ pointerEvents: 'none' }}\n      />\n      \n      {/* Draw markers separately for better control */}\n      {drawStartMarker()}\n      {drawEndMarker()}\n\n      {/* Cardinality label */}\n      <text\n        x={midX}\n        y={midY - 8}\n        fill=\"#334155\"\n        fontSize=\"11\"\n        fontWeight=\"600\"\n        textAnchor=\"middle\"\n        style={{ pointerEvents: 'none', userSelect: 'none' }}\n      >\n        {cardinalityLabel}\n      </text>\n\n      {/* Relationship label */}\n      {field.fkReference?.relationshipLabel && (\n        <text\n          x={midX}\n          y={midY + 8}\n          fill=\"#64748B\"\n          fontSize=\"10\"\n          fontStyle=\"italic\"\n          textAnchor=\"middle\"\n          style={{ pointerEvents: 'none', userSelect: 'none' }}\n        >\n          {field.fkReference.relationshipLabel}\n        </text>\n      )}\n\n      {/* Waypoint handles (pills) */}\n      {waypoints.map((wp, index) => (\n        <g\n          key={index}\n          onMouseDown={(e) => handleWaypointMouseDown(index, e)}\n          onDoubleClick={(e) => handleWaypointDoubleClick(index, e)}\n          style={{ cursor: 'move' }}\n        >\n          <ellipse\n            cx={wp.x}\n            cy={wp.y}\n            rx=\"8\"\n            ry=\"6\"\n            fill=\"white\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"2\"\n          />\n          <ellipse\n            cx={wp.x}\n            cy={wp.y}\n            rx=\"4\"\n            ry=\"3\"\n            fill=\"#3b82f6\"\n          />\n        </g>\n      ))}\n    </g>\n  );\n}\n","size_bytes":10124},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/TableView.tsx":{"content":"import { Key, Link as LinkIcon, AlertTriangle, AlertCircle, Lock, ArrowUpDown } from \"lucide-react\";\nimport type { Entity } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface TableViewProps {\n  entities: Entity[];\n  onEntityClick: (entityId: string) => void;\n}\n\ntype SortField = 'entity' | 'field' | 'type' | 'dataSource';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function TableView({ entities, onEntityClick }: TableViewProps) {\n  const [sortField, setSortField] = useState<SortField>('entity');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const flattenedData = entities.flatMap((entity) => {\n    return entity.fields.map((field) => ({\n      entityId: entity.id,\n      entityName: entity.name,\n      fieldId: field.id,\n      fieldName: field.name,\n      fieldType: field.type,\n      isPK: field.isPK,\n      isFK: field.isFK,\n      businessName: field.businessName,\n      notes: field.notes,\n      containsPII: field.containsPII,\n      visibleInERD: field.visibleInERD,\n      dataSource: entity.dataSource || '',\n      dataCloudObjectType: entity.dataCloudIntent?.objectType,\n    }));\n  });\n\n  const sortedData = [...flattenedData].sort((a, b) => {\n    let comparison = 0;\n    switch (sortField) {\n      case 'entity':\n        comparison = a.entityName.localeCompare(b.entityName);\n        break;\n      case 'field':\n        comparison = a.fieldName.localeCompare(b.fieldName);\n        break;\n      case 'type':\n        comparison = a.fieldType.localeCompare(b.fieldType);\n        break;\n      case 'dataSource':\n        comparison = a.dataSource.localeCompare(b.dataSource);\n        break;\n    }\n    return sortDirection === 'asc' ? comparison : -comparison;\n  });\n\n  const SortButton = ({ field, label }: { field: SortField; label: string }) => (\n    <button\n      onClick={() => handleSort(field)}\n      className=\"flex items-center gap-1 hover:text-coolgray-800 transition-colors\"\n      data-testid={`button-sort-${field}`}\n    >\n      {label}\n      <ArrowUpDown className=\"h-3 w-3\" />\n    </button>\n  );\n\n  return (\n    <div className=\"h-full overflow-auto bg-white\">\n      <table className=\"w-full border-collapse\">\n        <thead className=\"sticky top-0 bg-coolgray-100 z-10\">\n          <tr className=\"border-b-2 border-coolgray-200\">\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              <SortButton field=\"entity\" label=\"Entity\" />\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              <SortButton field=\"field\" label=\"Field Name\" />\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              <SortButton field=\"type\" label=\"Type\" />\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              Business Name\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              Notes\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              <SortButton field=\"dataSource\" label=\"Data Source\" />\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              Data Cloud\n            </th>\n            <th className=\"px-4 py-3 text-left text-sm font-semibold text-coolgray-600\">\n              ERD Visible\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedData.map((row, index) => (\n            <tr\n              key={`${row.entityId}-${row.fieldId}`}\n              className={`border-b border-coolgray-200 hover:bg-coolgray-50 cursor-pointer transition-colors ${\n                index % 2 === 0 ? 'bg-white' : 'bg-coolgray-50'\n              }`}\n              onClick={() => onEntityClick(row.entityId)}\n              data-testid={`row-field-${row.fieldId}`}\n            >\n              <td className=\"px-4 py-3 text-sm font-medium text-coolgray-700\">\n                {row.entityName}\n              </td>\n              <td className=\"px-4 py-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  {row.isPK && <Key className=\"h-3 w-3 text-primary-500 flex-shrink-0\" />}\n                  {row.isFK && <LinkIcon className=\"h-3 w-3 text-secondary-500 flex-shrink-0\" />}\n                  <span className=\"font-mono text-coolgray-700\">{row.fieldName}</span>\n                </div>\n              </td>\n              <td className=\"px-4 py-3 text-sm font-mono text-coolgray-600\">\n                {row.fieldType}\n              </td>\n              <td className=\"px-4 py-3 text-sm text-coolgray-600\">\n                {row.businessName || '-'}\n              </td>\n              <td className=\"px-4 py-3 text-sm text-coolgray-600 max-w-md truncate\">\n                {row.notes || '-'}\n              </td>\n              <td className=\"px-4 py-3 text-sm text-coolgray-600 font-mono\">\n                {row.dataSource || '-'}\n              </td>\n              <td className=\"px-4 py-3 text-sm\">\n                {row.dataCloudObjectType ? (\n                  <Badge className=\"text-xs px-2 py-0.5 bg-tertiary-50 text-tertiary-700 border border-tertiary-500 rounded-full\">\n                    {row.dataCloudObjectType}\n                  </Badge>\n                ) : (\n                  '-'\n                )}\n              </td>\n              <td className=\"px-4 py-3 text-sm text-center\">\n                {row.visibleInERD !== false ? (\n                  <span className=\"text-success-500\">✓</span>\n                ) : (\n                  <span className=\"text-coolgray-400\">-</span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {sortedData.length === 0 && (\n        <div className=\"flex items-center justify-center py-20\">\n          <div className=\"text-center\">\n            <p className=\"text-xl font-semibold text-coolgray-400\">No data to display</p>\n            <p className=\"text-sm text-coolgray-500 mt-2\">Add entities and fields to see them here</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6489},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"design_guidelines.md":{"content":"# Design Guidelines for Data Discovery Tool\n\n## Design Approach\n**System-Based Approach**: This is a utility-focused, productivity tool for Salesforce consultants. The design prioritizes efficiency, learnability, and data clarity over visual flair. Follow the provided design system exactly.\n\n---\n\n## Color Palette (Strict Usage Rules)\n\n### Primary Colors\n- **Primary Orange** (`primary-*`): CTAs, save buttons, primary actions ONLY\n- **Secondary Blue** (`secondary-*`): Navigation, informational elements, secondary actions\n- **Tertiary Green** (`tertiary-*`): Decorative accents ONLY (NOT for success states)\n\n### Utility Colors\n- **Success**: `success-500` (#2ABF3C) - Checkmarks, completed status\n- **Danger**: `danger-500` (#E74B3C) - Delete actions, critical flags, errors\n- **Warning**: `warning-500` (#FFC700) - Caution flags, important notes\n- **Info**: `info-500` (#4AA0D9) - Informational messages\n\n### Neutral Palette (CoolGray - 90% of UI)\n- **Backgrounds**: `coolgray-50` (page), `coolgray-100` (base), `white` (cards)\n- **Text**: `coolgray-600` (primary text), `coolgray-500` (secondary text)\n- **Borders**: `coolgray-200`\n- **Disabled**: `coolgray-400`\n\n---\n\n## Typography System\n\n**Font Families**:\n- Sans: Inter (UI text)\n- Mono: JetBrains Mono (technical/code content)\n\n**Hierarchy**:\n1. **Page Title**: `text-2xl font-bold text-coolgray-600`\n2. **Section Header**: `text-xl font-bold text-coolgray-600`\n3. **Card Title**: `text-lg font-semibold text-coolgray-600`\n4. **Body Text**: `text-base text-coolgray-600`\n5. **Label**: `text-sm font-medium text-coolgray-500`\n6. **Caption**: `text-xs text-coolgray-500`\n7. **Code/Technical**: `font-mono text-sm`\n\n---\n\n## Spacing Scale (4px Base Unit)\n\nUse ONLY these spacing values:\n- `0`: 0px\n- `1`: 4px\n- `2`: 8px\n- `3`: 12px\n- `4`: 16px (most common)\n- `5`: 20px\n- `6`: 24px\n- `8`: 32px (section spacing)\n- `10`: 40px\n- `12`: 48px\n- `16`: 64px\n- `20`: 80px\n- `24`: 96px\n\n**Common Patterns**:\n- Padding inside cards: `p-4` or `p-6`\n- Gap between elements: `gap-2`, `gap-4`\n- Section margins: `mb-8`, `mt-8`\n- Button padding: `px-4 py-2`\n\n---\n\n## Shape System\n\n**Border Radius**:\n- Buttons: `rounded-lg` (8px)\n- Cards: `rounded-xl` (12px)\n- Inputs: `rounded-md` (4px)\n- Badges/Pills: `rounded-full`\n- Small elements: `rounded-sm` (2px)\n\n**Elevation**:\n- Standard: `shadow-md`\n- Modals/Overlays: `shadow-lg`\n- Subtle: `shadow-sm`\n\n---\n\n## Component Patterns\n\n### Buttons\n```\nPrimary Action: bg-primary-500 hover:bg-primary-600 text-white rounded-lg shadow-md px-4 py-2\nSecondary Action: bg-secondary-500 hover:bg-secondary-600 text-white rounded-lg shadow-md px-4 py-2\nOutline: border-2 border-coolgray-200 hover:border-coolgray-300 text-coolgray-600 rounded-lg px-4 py-2\nDanger: bg-danger-500 hover:bg-danger-700 text-white rounded-lg shadow-md px-4 py-2\n```\n\n### Cards\n```\nbg-white rounded-xl shadow-md border border-coolgray-200 p-6\n```\n\n### Inputs\n```\nborder border-coolgray-200 rounded-md px-3 py-2 text-base focus:border-secondary-500 focus:ring-1 focus:ring-secondary-500\n```\n\n### Badges\n```\npx-3 py-1 rounded-full text-xs font-medium\nSuccess: bg-success-50 text-success-700\nDanger: bg-danger-50 text-danger-700\nWarning: bg-warning-50 text-warning-700\nInfo: bg-info-50 text-info-700\n```\n\n---\n\n## Layout Structure\n\n### Application Shell\n- **Sticky Navbar**: `bg-coolgray-50 border-b border-coolgray-200 shadow-md sticky top-0 z-50`\n- **Page Background**: `bg-coolgray-50`\n- **Content Padding**: `px-4 py-3` (navbar), `p-6` (main content)\n\n### Graph View (Interactive ERD Canvas)\n- **Canvas Background**: `bg-white` or subtle grid pattern\n- **Entity Nodes**: Draggable cards with `bg-white rounded-xl shadow-md border-2`\n- **Selected Node**: `border-secondary-500`\n- **Relationship Lines**: `stroke-coolgray-400` with arrowheads, labels showing cardinality\n- **Hover State**: Subtle shadow increase, no color change\n\n### Table View\n- **Header Row**: `bg-coolgray-100 border-b-2 border-coolgray-200 font-semibold`\n- **Data Rows**: `bg-white border-b border-coolgray-200 hover:bg-coolgray-50`\n- **Zebra Striping**: Optional `odd:bg-coolgray-50`\n\n---\n\n## Visual Hierarchy Principles\n\n1. **Information Density**: Professional, data-rich layouts. Avoid excessive whitespace.\n2. **Contrast**: Use shadow-md and borders to create depth, not just color.\n3. **Focus States**: Always use `focus:ring` and `focus:border` for keyboard navigation.\n4. **Icon Consistency**: Use lucide-react icons at h-4 w-4 (small) or h-5 w-5 (medium).\n5. **Status Indicators**: Use colored dots or badges, never rely on color alone.\n\n---\n\n## Accessibility Requirements\n\n- All interactive elements: `focus:ring-2 focus:ring-secondary-500`\n- Sufficient contrast ratios (coolgray-600 text on white backgrounds)\n- Icon-only buttons must have `aria-label`\n- Keyboard navigation: Tab order follows visual flow\n- PII indicators must have visual markers beyond color (lock icon)\n\n---\n\n## No Images/Illustrations\n\nThis is a data-focused productivity tool. No hero images, decorative graphics, or illustrations. All visual communication through typography, iconography, and structured layouts.","size_bytes":5120},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/examples/Toolbar.tsx":{"content":"import { useState } from 'react';\nimport Toolbar from '../Toolbar';\n\nexport default function ToolbarExample() {\n  const [viewMode, setViewMode] = useState<'graph' | 'table'>('graph');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  return (\n    <Toolbar\n      viewMode={viewMode}\n      onViewModeChange={setViewMode}\n      searchQuery={searchQuery}\n      onSearchChange={setSearchQuery}\n      sourceFilter=\"all\"\n      onSourceFilterChange={(source) => console.log('Source filter:', source)}\n      typeFilter=\"all\"\n      onTypeFilterChange={(type) => console.log('Type filter:', type)}\n      flagFilter={null}\n      onFlagFilterChange={(flag) => console.log('Flag filter:', flag)}\n    />\n  );\n}\n","size_bytes":703},"client/src/components/examples/EntityNode.tsx":{"content":"import EntityNode from '../EntityNode';\nimport type { Entity } from '@shared/schema';\n\nexport default function EntityNodeExample() {\n  const entity: Entity = {\n    id: '1',\n    name: 'Customer',\n    sourceSystem: {\n      type: 'salesforce',\n      name: 'Salesforce CRM',\n    },\n    dataCloudIntent: {\n      objectType: 'Profile',\n    },\n    fields: [\n      {\n        id: 'f1',\n        name: 'customer_id',\n        type: 'uuid',\n        isPK: true,\n        isFK: false,\n      },\n      {\n        id: 'f2',\n        name: 'account_id',\n        type: 'uuid',\n        isPK: false,\n        isFK: true,\n        fkReference: {\n          targetEntityId: '2',\n          targetFieldId: 'f10',\n          cardinality: 'many-to-one',\n        },\n      },\n      {\n        id: 'f3',\n        name: 'email',\n        type: 'email',\n        isPK: false,\n        isFK: false,\n        containsPII: true,\n      },\n      {\n        id: 'f4',\n        name: 'first_name',\n        type: 'string',\n        isPK: false,\n        isFK: false,\n        containsPII: true,\n      },\n      {\n        id: 'f5',\n        name: 'last_name',\n        type: 'string',\n        isPK: false,\n        isFK: false,\n        containsPII: true,\n        flag: 'caution',\n      },\n      {\n        id: 'f6',\n        name: 'created_at',\n        type: 'datetime',\n        isPK: false,\n        isFK: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"relative w-full h-96 bg-coolgray-50\">\n      <EntityNode\n        entity={entity}\n        isSelected={false}\n        onSelect={() => console.log('Entity selected')}\n        onDragStart={(e) => console.log('Drag start', e)}\n        onDrag={(e) => console.log('Dragging', e)}\n        onDragEnd={(e) => console.log('Drag end', e)}\n        style={{ left: 100, top: 50 }}\n      />\n    </div>\n  );\n}\n","size_bytes":1792},"client/src/components/EntityNode.tsx":{"content":"import { Key, Link as LinkIcon, Lock, Waves, Cylinder, Layers, Database, Sparkles, Wand } from \"lucide-react\";\nimport type { Entity } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { getEntityCardStyle } from \"@/lib/dataCloudStyles\";\n\ninterface EntityNodeProps {\n  entity: Entity;\n  isSelected: boolean;\n  isSearchMatch?: boolean;\n  dimmed?: boolean;\n  onSelect: () => void;\n  onDragStart: (e: React.DragEvent) => void;\n  onDrag: (e: React.DragEvent) => void;\n  onDragEnd: (e: React.DragEvent) => void;\n  onDoubleClick: () => void;\n  style?: React.CSSProperties;\n  onGenerateDLO?: (entityId: string) => void;\n  onGenerateDMO?: (entityId: string) => void;\n  hasLinkedDLO?: boolean;\n  hasLinkedDMO?: boolean;\n}\n\nexport default function EntityNode({\n  entity,\n  isSelected,\n  isSearchMatch = false,\n  dimmed = false,\n  onSelect,\n  onDragStart,\n  onDrag,\n  onDragEnd,\n  onDoubleClick,\n  style,\n  onGenerateDLO,\n  onGenerateDMO,\n  hasLinkedDLO = false,\n  hasLinkedDMO = false,\n}: EntityNodeProps) {\n  const visibleFields = entity.fields.filter(f => f.visibleInERD !== false);\n  const pkFields = visibleFields.filter(f => f.isPK);\n  const fkFields = visibleFields.filter(f => f.isFK);\n  const regularFields = visibleFields.filter(f => !f.isPK && !f.isFK);\n\n  const cardStyle = getEntityCardStyle(entity.type);\n\n  const IconComponent = {\n    'Database': Database,\n    'Waves': Waves,\n    'Cylinder': Cylinder,\n    'Layers': Layers,\n    'Sparkles': Sparkles,\n  }[cardStyle.icon] || Database;\n\n  return (\n    <div\n      draggable\n      onDragStart={onDragStart}\n      onDrag={onDrag}\n      onDragEnd={onDragEnd}\n      onClick={onSelect}\n      onDoubleClick={onDoubleClick}\n      style={{\n        ...style,\n        backgroundColor: cardStyle.background,\n        borderColor: cardStyle.borderColor,\n        borderWidth: '2px',\n      }}\n      className={`absolute rounded-xl shadow-md cursor-move select-none transition-all\n        ${isSelected ? 'ring-4 ring-offset-2 shadow-lg' : ''}\n        ${isSearchMatch ? 'pulse-ring ring-4' : ''}\n        ${dimmed ? 'opacity-30' : ''}\n        hover:shadow-lg`}\n      data-testid={`entity-node-${entity.id}`}\n    >\n      <div className=\"w-80\">\n        <div className=\"px-4 py-3 border-b border-coolgray-200 flex items-center gap-2\">\n          <IconComponent className=\"h-5 w-5 flex-shrink-0\" style={{ color: cardStyle.borderColor }} />\n          <h3 className=\"text-lg font-semibold text-coolgray-700 break-words flex-1\">{entity.name}</h3>\n          <Badge \n            variant={cardStyle.badge.color === 'secondary' ? 'secondary' : 'default'}\n            className=\"text-xs px-2 py-0.5\"\n            data-testid={`badge-${entity.type}`}\n          >\n            {cardStyle.badge.text}\n          </Badge>\n        </div>\n\n        {/* Metadata row */}\n        <div className=\"px-4 py-2 border-b border-coolgray-200 text-xs text-coolgray-600\">\n          {entity.type === 'data-stream' && entity.dataCloudMetadata?.streamConfig && (\n            <div className=\"flex gap-2\">\n              <span>{entity.dataCloudMetadata.streamConfig.refreshType}</span>\n              <span>•</span>\n              <span>{entity.dataCloudMetadata.streamConfig.schedule}</span>\n            </div>\n          )}\n          {entity.type === 'dlo' && entity.sourceDataStreamId && (\n            <div>\n              <span>Source: Data Stream</span>\n            </div>\n          )}\n          {entity.type === 'dmo' && (\n            <div className=\"flex gap-2\">\n              {entity.sourceDLOIds && entity.sourceDLOIds.length > 0 && (\n                <>\n                  <span>Sources: {entity.sourceDLOIds.length} DLO{entity.sourceDLOIds.length > 1 ? 's' : ''}</span>\n                  <span>•</span>\n                </>\n              )}\n              <span>{entity.dataCloudMetadata?.profileObjectType || 'TBD'}</span>\n            </div>\n          )}\n          {entity.dataSource && entity.type === 'dmo' && (\n            <div className=\"text-xs text-coolgray-500 font-mono\">{entity.dataSource}</div>\n          )}\n        </div>\n\n        {/* Fields preview */}\n        <div className=\"px-4 py-2 max-h-60 overflow-y-auto\">\n          {pkFields.length > 0 && (\n            <div className=\"mb-2\">\n              {pkFields.map((field) => (\n                <div key={field.id} className=\"flex items-center gap-2 py-1 text-sm\">\n                  <Key className=\"h-3 w-3 text-primary-500 flex-shrink-0\" />\n                  <span className=\"font-mono text-coolgray-700 font-medium\">{field.name}</span>\n                  <span className=\"text-xs text-coolgray-500\">{field.type}</span>\n                  {field.containsPII && <Lock className=\"h-3 w-3 text-warning-500 flex-shrink-0\" />}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {fkFields.length > 0 && (\n            <div className=\"mb-2\">\n              {fkFields.map((field) => (\n                <div key={field.id} className=\"flex items-center gap-2 py-1 text-sm\">\n                  <LinkIcon className=\"h-3 w-3 text-secondary-500 flex-shrink-0\" />\n                  <span className=\"font-mono text-coolgray-700\">{field.name}</span>\n                  <span className=\"text-xs text-coolgray-500\">{field.type}</span>\n                  {field.containsPII && <Lock className=\"h-3 w-3 text-warning-500 flex-shrink-0\" />}\n                </div>\n              ))}\n            </div>\n          )}\n\n          {regularFields.length > 0 && (\n            <div>\n              {regularFields.slice(0, 8).map((field) => (\n                <div key={field.id} className=\"flex items-center gap-2 py-1 text-sm\">\n                  <div className=\"w-3 flex-shrink-0\" />\n                  <span className=\"font-mono text-coolgray-600\">{field.name}</span>\n                  <span className=\"text-xs text-coolgray-500\">{field.type}</span>\n                  {field.containsPII && <Lock className=\"h-3 w-3 text-warning-500 flex-shrink-0\" />}\n                </div>\n              ))}\n              {regularFields.length > 8 && (\n                <p className=\"text-xs text-coolgray-500 mt-1 pl-5\">\n                  +{regularFields.length - 8} more fields\n                </p>\n              )}\n            </div>\n          )}\n\n          {visibleFields.length === 0 && (\n            <p className=\"text-xs text-coolgray-400 py-2 text-center\">No visible fields</p>\n          )}\n        </div>\n\n        {/* Auto-generation buttons */}\n        {entity.type === 'data-stream' && !hasLinkedDLO && onGenerateDLO && (\n          <div className=\"px-4 py-2 border-t border-coolgray-200\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onGenerateDLO(entity.id);\n              }}\n              className=\"w-full text-tertiary-700 border-tertiary-300 hover:bg-tertiary-50\"\n              data-testid=\"button-generate-dlo\"\n            >\n              <Wand className=\"h-4 w-4 mr-1\" />\n              Generate DLO\n            </Button>\n          </div>\n        )}\n\n        {entity.type === 'dlo' && !hasLinkedDMO && onGenerateDMO && (\n          <div className=\"px-4 py-2 border-t border-coolgray-200\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onGenerateDMO(entity.id);\n              }}\n              className=\"w-full text-primary-700 border-primary-300 hover:bg-primary-50\"\n              data-testid=\"button-generate-dmo\"\n            >\n              <Wand className=\"h-4 w-4 mr-1\" />\n              Generate DMO\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7743},"client/src/components/ListView.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronDown, ChevronUp, Key, Link as LinkIcon, Lock, FileText, ArrowRight, Edit, Copy, Trash2 } from \"lucide-react\";\nimport type { Entity, Cardinality } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { getEntityCardStyle } from \"@/lib/dataCloudStyles\";\n\ninterface ListViewProps {\n  entities: Entity[];\n  selectedEntityId?: string | null;\n  onEntityClick: (entityId: string) => void;\n}\n\ntype RelationshipInfo = {\n  sourceEntityId: string;\n  sourceEntityName: string;\n  targetEntityId: string;\n  targetEntityName: string;\n  fieldId: string;\n  fieldName: string;\n  cardinality: Cardinality;\n  relationshipLabel?: string;\n};\n\ntype CardinalityFilter = 'all' | 'one-to-one' | 'one-to-many' | 'many-to-one';\n\nexport default function ListView({ entities, selectedEntityId, onEntityClick }: ListViewProps) {\n  const [expandedEntityIds, setExpandedEntityIds] = useState<Set<string>>(new Set());\n  const [activeTabPerEntity, setActiveTabPerEntity] = useState<Record<string, string>>({});\n  const [cardinalityFilterPerEntity, setCardinalityFilterPerEntity] = useState<Record<string, CardinalityFilter>>({});\n  const [showAllFieldsPerEntity, setShowAllFieldsPerEntity] = useState<Record<string, boolean>>({});\n\n  // Auto-expand selected entity when switching to List View\n  useEffect(() => {\n    if (selectedEntityId && entities.find(e => e.id === selectedEntityId)) {\n      setExpandedEntityIds(prev => {\n        if (!prev.has(selectedEntityId)) {\n          return new Set([selectedEntityId]);\n        }\n        return prev;\n      });\n    }\n  }, [selectedEntityId, entities]);\n\n  const toggleExpanded = (entityId: string) => {\n    const newExpanded = new Set(expandedEntityIds);\n    if (newExpanded.has(entityId)) {\n      newExpanded.delete(entityId);\n    } else {\n      newExpanded.add(entityId);\n    }\n    setExpandedEntityIds(newExpanded);\n  };\n\n  const setActiveTab = (entityId: string, tab: string) => {\n    setActiveTabPerEntity({ ...activeTabPerEntity, [entityId]: tab });\n  };\n\n  const setCardinalityFilter = (entityId: string, filter: CardinalityFilter) => {\n    setCardinalityFilterPerEntity({ ...cardinalityFilterPerEntity, [entityId]: filter });\n  };\n\n  const toggleShowAllFields = (entityId: string) => {\n    setShowAllFieldsPerEntity({ \n      ...showAllFieldsPerEntity, \n      [entityId]: !showAllFieldsPerEntity[entityId] \n    });\n  };\n\n  const formatCardinality = (cardinality: Cardinality): string => {\n    switch (cardinality) {\n      case 'one-to-one': return '1:1';\n      case 'one-to-many': return '1:M';\n      case 'many-to-one': return 'M:1';\n      default: return cardinality;\n    }\n  };\n\n  const calculateRelationships = (entity: Entity): { outgoing: RelationshipInfo[]; incoming: RelationshipInfo[] } => {\n    const outgoing: RelationshipInfo[] = [];\n    const incoming: RelationshipInfo[] = [];\n\n    // Outgoing: FK fields from this entity\n    entity.fields.forEach(field => {\n      if (field.isFK && field.fkReference) {\n        const targetEntity = entities.find(e => e.id === field.fkReference!.targetEntityId);\n        if (targetEntity) {\n          outgoing.push({\n            sourceEntityId: entity.id,\n            sourceEntityName: entity.name,\n            targetEntityId: targetEntity.id,\n            targetEntityName: targetEntity.name,\n            fieldId: field.id,\n            fieldName: field.name,\n            cardinality: field.fkReference.cardinality,\n            relationshipLabel: field.fkReference.relationshipLabel,\n          });\n        }\n      }\n    });\n\n    // Incoming: FK fields from other entities that reference this entity\n    entities.forEach(otherEntity => {\n      if (otherEntity.id !== entity.id) {\n        otherEntity.fields.forEach(field => {\n          if (field.isFK && field.fkReference?.targetEntityId === entity.id) {\n            incoming.push({\n              sourceEntityId: otherEntity.id,\n              sourceEntityName: otherEntity.name,\n              targetEntityId: entity.id,\n              targetEntityName: entity.name,\n              fieldId: field.id,\n              fieldName: field.name,\n              cardinality: field.fkReference.cardinality,\n              relationshipLabel: field.fkReference.relationshipLabel,\n            });\n          }\n        });\n      }\n    });\n\n    return { outgoing, incoming };\n  };\n\n  const countRelationships = (entity: Entity): number => {\n    const { outgoing, incoming } = calculateRelationships(entity);\n    return outgoing.length + incoming.length;\n  };\n\n  const getImplementationStatusBadge = (status?: string) => {\n    if (!status) return null;\n    \n    const statusConfig = {\n      'not-started': { bg: 'bg-coolgray-100', text: 'text-coolgray-600', label: 'Not Started' },\n      'in-progress': { bg: 'bg-warning-50', text: 'text-warning-700', label: 'In Progress' },\n      'completed': { bg: 'bg-success-50', text: 'text-success-700', label: 'Completed' },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig];\n    if (!config) return null;\n\n    return (\n      <Badge className={`${config.bg} ${config.text} border-0 text-xs`}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"h-full overflow-auto bg-coolgray-50 p-6\">\n      <div className=\"max-w-5xl mx-auto\">\n        {entities.length === 0 ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <p className=\"text-xl font-semibold text-coolgray-400\">No entities to display</p>\n              <p className=\"text-sm text-coolgray-500 mt-2\">Create entities to see them here</p>\n            </div>\n          </div>\n        ) : (\n          entities.map((entity) => {\n            const isExpanded = expandedEntityIds.has(entity.id);\n            const activeTab = activeTabPerEntity[entity.id] || 'fields';\n            const cardinalityFilter = cardinalityFilterPerEntity[entity.id] || 'all';\n            const showAllFields = showAllFieldsPerEntity[entity.id] || false;\n            const relationshipCount = countRelationships(entity);\n            const { outgoing, incoming } = calculateRelationships(entity);\n\n            const fieldsToShow = showAllFields ? entity.fields : entity.fields.slice(0, 5);\n            const hasMoreFields = entity.fields.length > 5;\n\n            const filteredOutgoing = cardinalityFilter === 'all' \n              ? outgoing \n              : outgoing.filter(r => r.cardinality === cardinalityFilter);\n            \n            const filteredIncoming = cardinalityFilter === 'all'\n              ? incoming\n              : incoming.filter(r => r.cardinality === cardinalityFilter);\n\n            return (\n              <Card \n                key={entity.id}\n                className=\"mb-4 cursor-pointer hover:shadow-lg transition-shadow bg-white border-coolgray-200\"\n                data-testid={`card-entity-${entity.id}`}\n              >\n                {/* Collapsed State */}\n                <div \n                  className=\"p-4 flex items-center justify-between\"\n                  onClick={() => toggleExpanded(entity.id)}\n                  data-testid={`button-toggle-entity-${entity.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {(() => {\n                      const style = getEntityCardStyle(entity.type || 'dmo');\n                      const badgeColorClass = style.badge.color === 'primary' ? 'bg-primary-50 text-primary-700 border-primary-500' :\n                                              style.badge.color === 'secondary' ? 'bg-secondary-50 text-secondary-700 border-secondary-500' :\n                                              style.badge.color === 'tertiary' ? 'bg-tertiary-50 text-tertiary-700 border-tertiary-500' :\n                                              'bg-coolgray-100 text-coolgray-700 border-coolgray-400';\n                      return (\n                        <Badge className={`${badgeColorClass} text-xs font-semibold border`}>\n                          {style.badge.text}\n                        </Badge>\n                      );\n                    })()}\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-coolgray-600\" data-testid={`text-entity-name-${entity.id}`}>\n                        {entity.name}\n                      </h3>\n                      <p className=\"text-xs text-coolgray-500\">\n                        {entity.fields.length} fields • {relationshipCount} relationships\n                        {entity.dataSource && <> • {entity.dataSource}</>}\n                      </p>\n                    </div>\n                  </div>\n                  {isExpanded ? (\n                    <ChevronUp className=\"h-5 w-5 text-coolgray-500\" />\n                  ) : (\n                    <ChevronDown className=\"h-5 w-5 text-coolgray-500\" />\n                  )}\n                </div>\n\n                {/* Expanded State */}\n                {isExpanded && (\n                  <div className=\"border-t border-coolgray-200\">\n                    {/* Metadata Section */}\n                    <div className=\"bg-coolgray-100 p-4 grid grid-cols-3 gap-4\">\n                      <div>\n                        <p className=\"text-xs font-medium text-coolgray-500 mb-1\">Data Source</p>\n                        <p className=\"text-sm text-coolgray-700 font-mono\">{entity.dataSource || '-'}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs font-medium text-coolgray-500 mb-1\">Data Cloud Type</p>\n                        <p className=\"text-sm text-coolgray-700\">\n                          {entity.dataCloudMetadata?.objectType || '-'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs font-medium text-coolgray-500 mb-1\">Implementation Status</p>\n                        <div className=\"flex items-center\">\n                          {entity.implementationStatus ? (\n                            getImplementationStatusBadge(entity.implementationStatus)\n                          ) : (\n                            <p className=\"text-sm text-coolgray-700\">-</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Tab Navigation */}\n                    <Tabs \n                      value={activeTab} \n                      onValueChange={(value) => setActiveTab(entity.id, value)}\n                      className=\"p-4\"\n                    >\n                      <TabsList className=\"bg-coolgray-100 mb-4\">\n                        <TabsTrigger value=\"fields\" data-testid={`tab-fields-${entity.id}`}>\n                          Fields\n                        </TabsTrigger>\n                        <TabsTrigger value=\"relationships\" data-testid={`tab-relationships-${entity.id}`}>\n                          Relationships\n                        </TabsTrigger>\n                      </TabsList>\n\n                      {/* Fields Tab */}\n                      <TabsContent value=\"fields\" className=\"mt-0\">\n                        {entity.fields.length === 0 ? (\n                          <p className=\"text-sm text-coolgray-500 text-center py-4\">No fields defined</p>\n                        ) : (\n                          <div className=\"space-y-2\">\n                            {fieldsToShow.map((field) => (\n                              <div \n                                key={field.id} \n                                className=\"flex items-center justify-between p-3 border border-coolgray-200 rounded-lg hover:bg-coolgray-50\"\n                                data-testid={`field-item-${field.id}`}\n                              >\n                                <div className=\"flex items-center gap-3 flex-1\">\n                                  <div className=\"flex gap-1\">\n                                    {field.isPK && (\n                                      <TooltipProvider>\n                                        <Tooltip>\n                                          <TooltipTrigger>\n                                            <Key className=\"h-4 w-4 text-primary-500\" />\n                                          </TooltipTrigger>\n                                          <TooltipContent>Primary Key</TooltipContent>\n                                        </Tooltip>\n                                      </TooltipProvider>\n                                    )}\n                                    {field.isFK && (\n                                      <TooltipProvider>\n                                        <Tooltip>\n                                          <TooltipTrigger>\n                                            <LinkIcon className=\"h-4 w-4 text-secondary-500\" />\n                                          </TooltipTrigger>\n                                          <TooltipContent>Foreign Key</TooltipContent>\n                                        </Tooltip>\n                                      </TooltipProvider>\n                                    )}\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <code className=\"text-sm font-mono text-coolgray-700\">{field.name}</code>\n                                      {field.businessName && (\n                                        <span className=\"text-xs text-coolgray-500\">({field.businessName})</span>\n                                      )}\n                                    </div>\n                                  </div>\n                                  <Badge className=\"bg-coolgray-100 text-coolgray-600 border-0 text-xs font-mono\">\n                                    {field.type}\n                                  </Badge>\n                                  {field.containsPII && (\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger>\n                                          <Badge className=\"bg-warning-50 text-warning-700 border border-warning-500 text-xs flex items-center gap-1\">\n                                            <Lock className=\"h-3 w-3\" />\n                                            PII\n                                          </Badge>\n                                        </TooltipTrigger>\n                                        <TooltipContent>Contains Personal Identifiable Information</TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  )}\n                                  {field.notes && (\n                                    <TooltipProvider>\n                                      <Tooltip>\n                                        <TooltipTrigger>\n                                          <FileText className=\"h-4 w-4 text-info-500\" />\n                                        </TooltipTrigger>\n                                        <TooltipContent className=\"max-w-xs\">\n                                          {field.notes}\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  )}\n                                </div>\n                              </div>\n                            ))}\n                            {hasMoreFields && !showAllFields && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => toggleShowAllFields(entity.id)}\n                                className=\"w-full mt-2 border-coolgray-200 hover:bg-coolgray-50\"\n                                data-testid={`button-show-all-fields-${entity.id}`}\n                              >\n                                Show All {entity.fields.length} Fields\n                              </Button>\n                            )}\n                            {hasMoreFields && showAllFields && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => toggleShowAllFields(entity.id)}\n                                className=\"w-full mt-2 border-coolgray-200 hover:bg-coolgray-50\"\n                                data-testid={`button-show-less-fields-${entity.id}`}\n                              >\n                                Show Less\n                              </Button>\n                            )}\n                          </div>\n                        )}\n                      </TabsContent>\n\n                      {/* Relationships Tab */}\n                      <TabsContent value=\"relationships\" className=\"mt-0\">\n                        {/* Cardinality Filter */}\n                        <div className=\"mb-4\">\n                          <Select\n                            value={cardinalityFilter}\n                            onValueChange={(value) => setCardinalityFilter(entity.id, value as CardinalityFilter)}\n                          >\n                            <SelectTrigger className=\"w-48 border-coolgray-200\" data-testid={`select-cardinality-${entity.id}`}>\n                              <SelectValue placeholder=\"Filter by cardinality\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"all\">All</SelectItem>\n                              <SelectItem value=\"one-to-one\">1:1</SelectItem>\n                              <SelectItem value=\"one-to-many\">1:M</SelectItem>\n                              <SelectItem value=\"many-to-one\">M:1</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {outgoing.length === 0 && incoming.length === 0 ? (\n                          <p className=\"text-sm text-coolgray-500 text-center py-4\">No relationships defined</p>\n                        ) : (\n                          <div className=\"space-y-6\">\n                            {/* References (Outgoing) */}\n                            {filteredOutgoing.length > 0 && (\n                              <div>\n                                <h4 className=\"text-sm font-semibold text-coolgray-600 mb-3\">\n                                  References ({filteredOutgoing.length})\n                                </h4>\n                                <div className=\"space-y-2\">\n                                  {filteredOutgoing.map((rel, idx) => (\n                                    <div\n                                      key={`out-${rel.fieldId}-${idx}`}\n                                      className=\"p-3 border border-coolgray-200 rounded-lg hover:bg-coolgray-50 cursor-pointer transition-colors\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        onEntityClick(rel.targetEntityId);\n                                      }}\n                                      data-testid={`relationship-outgoing-${rel.fieldId}`}\n                                    >\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center gap-2\">\n                                          <span className=\"font-semibold text-coolgray-700\">{rel.sourceEntityName}</span>\n                                          <ArrowRight className=\"h-4 w-4 text-coolgray-400\" />\n                                          <span className=\"font-semibold text-primary-500\">{rel.targetEntityName}</span>\n                                        </div>\n                                        <Badge className=\"bg-secondary-50 text-secondary-700 border border-secondary-500 text-xs\">\n                                          {formatCardinality(rel.cardinality)}\n                                        </Badge>\n                                      </div>\n                                      <div className=\"text-xs text-coolgray-500 mt-1\">\n                                        via <code className=\"font-mono bg-coolgray-100 px-1 py-0.5 rounded\">{rel.fieldName}</code>\n                                        {rel.relationshipLabel && <span> • \"{rel.relationshipLabel}\"</span>}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Referenced By (Incoming) */}\n                            {filteredIncoming.length > 0 && (\n                              <div>\n                                <h4 className=\"text-sm font-semibold text-coolgray-600 mb-3\">\n                                  Referenced By ({filteredIncoming.length})\n                                </h4>\n                                <div className=\"space-y-2\">\n                                  {filteredIncoming.map((rel, idx) => (\n                                    <div\n                                      key={`in-${rel.fieldId}-${idx}`}\n                                      className=\"p-3 border border-coolgray-200 rounded-lg hover:bg-coolgray-50 cursor-pointer transition-colors\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        onEntityClick(rel.sourceEntityId);\n                                      }}\n                                      data-testid={`relationship-incoming-${rel.fieldId}`}\n                                    >\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center gap-2\">\n                                          <span className=\"font-semibold text-coolgray-700\">{rel.sourceEntityName}</span>\n                                          <ArrowRight className=\"h-4 w-4 text-coolgray-400\" />\n                                          <span className=\"font-semibold text-primary-500\">{rel.targetEntityName}</span>\n                                        </div>\n                                        <Badge className=\"bg-secondary-50 text-secondary-700 border border-secondary-500 text-xs\">\n                                          {formatCardinality(rel.cardinality)}\n                                        </Badge>\n                                      </div>\n                                      <div className=\"text-xs text-coolgray-500 mt-1\">\n                                        via <code className=\"font-mono bg-coolgray-100 px-1 py-0.5 rounded\">{rel.fieldName}</code>\n                                        {rel.relationshipLabel && <span> • \"{rel.relationshipLabel}\"</span>}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {filteredOutgoing.length === 0 && filteredIncoming.length === 0 && (\n                              <p className=\"text-sm text-coolgray-500 text-center py-4\">\n                                No relationships match the selected filter\n                              </p>\n                            )}\n                          </div>\n                        )}\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Action Buttons */}\n                    <div className=\"border-t border-coolgray-200 p-4 flex gap-2\">\n                      <Button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onEntityClick(entity.id);\n                        }}\n                        className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n                        data-testid={`button-edit-entity-${entity.id}`}\n                      >\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Edit Entity\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          // Future feature: Duplicate\n                        }}\n                        className=\"border-coolgray-200 text-coolgray-600\"\n                        data-testid={`button-duplicate-entity-${entity.id}`}\n                      >\n                        <Copy className=\"h-4 w-4 mr-2\" />\n                        Duplicate\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          // Future feature: Delete\n                        }}\n                        className=\"border-coolgray-200 text-danger-500 hover:bg-danger-50\"\n                        data-testid={`button-delete-entity-${entity.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":26160},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/examples/EntityModal.tsx":{"content":"import { useState } from 'react';\nimport EntityModal from '../EntityModal';\nimport { Button } from '@/components/ui/button';\nimport type { Entity } from '@shared/schema';\n\nexport default function EntityModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const entities: Entity[] = [\n    {\n      id: '1',\n      name: 'Account',\n      sourceSystem: { type: 'salesforce', name: 'Salesforce CRM' },\n      fields: [\n        { id: 'f1', name: 'account_id', type: 'uuid', isPK: true, isFK: false },\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"p-8\">\n      <Button\n        onClick={() => setIsOpen(true)}\n        className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n      >\n        Open Entity Modal\n      </Button>\n      <EntityModal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        entity={null}\n        entities={entities}\n        onSave={(entity) => {\n          console.log('Save entity:', entity);\n          setIsOpen(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":1014},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/examples/GraphView.tsx":{"content":"import { useState } from 'react';\nimport GraphView from '../GraphView';\nimport type { Entity } from '@shared/schema';\n\nexport default function GraphViewExample() {\n  const [selectedEntityId, setSelectedEntityId] = useState<string | null>(null);\n  const [entities, setEntities] = useState<Entity[]>([\n    {\n      id: '1',\n      name: 'Customer',\n      sourceSystem: { type: 'salesforce', name: 'Salesforce CRM' },\n      dataCloudIntent: { objectType: 'Profile' },\n      position: { x: 100, y: 100 },\n      fields: [\n        { id: 'f1', name: 'customer_id', type: 'uuid', isPK: true, isFK: false },\n        { id: 'f2', name: 'email', type: 'email', isPK: false, isFK: false, containsPII: true },\n        { id: 'f3', name: 'first_name', type: 'string', isPK: false, isFK: false },\n      ],\n    },\n    {\n      id: '2',\n      name: 'Order',\n      sourceSystem: { type: 'database', name: 'PostgreSQL' },\n      dataCloudIntent: { objectType: 'Engagement' },\n      position: { x: 450, y: 100 },\n      fields: [\n        { id: 'f4', name: 'order_id', type: 'uuid', isPK: true, isFK: false },\n        {\n          id: 'f5',\n          name: 'customer_id',\n          type: 'uuid',\n          isPK: false,\n          isFK: true,\n          fkReference: {\n            targetEntityId: '1',\n            targetFieldId: 'f1',\n            cardinality: 'many-to-one',\n          },\n        },\n        { id: 'f6', name: 'total_amount', type: 'decimal', isPK: false, isFK: false },\n      ],\n    },\n    {\n      id: '3',\n      name: 'Product',\n      sourceSystem: { type: 'api', name: 'Product API' },\n      dataCloudIntent: { objectType: 'Other' },\n      position: { x: 250, y: 350 },\n      fields: [\n        { id: 'f7', name: 'product_id', type: 'uuid', isPK: true, isFK: false },\n        { id: 'f8', name: 'name', type: 'string', isPK: false, isFK: false },\n        { id: 'f9', name: 'price', type: 'decimal', isPK: false, isFK: false },\n      ],\n    },\n  ]);\n\n  const handleUpdatePosition = (entityId: string, position: { x: number; y: number }) => {\n    setEntities(entities.map(e => e.id === entityId ? { ...e, position } : e));\n  };\n\n  return (\n    <div className=\"h-[600px] border border-coolgray-200 rounded-xl overflow-hidden\">\n      <GraphView\n        entities={entities}\n        selectedEntityId={selectedEntityId}\n        onSelectEntity={setSelectedEntityId}\n        onUpdateEntityPosition={handleUpdatePosition}\n        onEntityDoubleClick={(id) => console.log('Double click entity:', id)}\n      />\n    </div>\n  );\n}\n","size_bytes":2501},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":620},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/examples/ProjectDialog.tsx":{"content":"import { useState } from 'react';\nimport ProjectDialog from '../ProjectDialog';\nimport { Button } from '@/components/ui/button';\n\nexport default function ProjectDialogExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div className=\"p-8\">\n      <Button\n        onClick={() => setIsOpen(true)}\n        className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n      >\n        Open Project Dialog\n      </Button>\n      <ProjectDialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        project={null}\n        onSave={(data) => {\n          console.log('Save project:', data);\n          setIsOpen(false);\n        }}\n        title=\"Create New Project\"\n      />\n    </div>\n  );\n}\n","size_bytes":721},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/examples/TableView.tsx":{"content":"import TableView from '../TableView';\nimport type { Entity } from '@shared/schema';\n\nexport default function TableViewExample() {\n  const entities: Entity[] = [\n    {\n      id: '1',\n      name: 'Customer',\n      sourceSystem: { type: 'salesforce', name: 'Salesforce CRM' },\n      dataCloudIntent: { objectType: 'Profile' },\n      fields: [\n        {\n          id: 'f1',\n          name: 'customer_id',\n          type: 'uuid',\n          isPK: true,\n          isFK: false,\n          businessName: 'Customer Identifier',\n          description: 'Unique identifier for each customer',\n        },\n        {\n          id: 'f2',\n          name: 'email',\n          type: 'email',\n          isPK: false,\n          isFK: false,\n          containsPII: true,\n          businessName: 'Email Address',\n          description: 'Customer email for communications',\n          flag: 'caution',\n        },\n        {\n          id: 'f3',\n          name: 'first_name',\n          type: 'string',\n          isPK: false,\n          isFK: false,\n          containsPII: true,\n          businessName: 'First Name',\n        },\n      ],\n    },\n    {\n      id: '2',\n      name: 'Order',\n      sourceSystem: { type: 'database', name: 'PostgreSQL' },\n      dataCloudIntent: { objectType: 'Engagement' },\n      fields: [\n        {\n          id: 'f4',\n          name: 'order_id',\n          type: 'uuid',\n          isPK: true,\n          isFK: false,\n          businessName: 'Order ID',\n        },\n        {\n          id: 'f5',\n          name: 'customer_id',\n          type: 'uuid',\n          isPK: false,\n          isFK: true,\n          businessName: 'Customer Reference',\n        },\n        {\n          id: 'f6',\n          name: 'total_amount',\n          type: 'decimal',\n          isPK: false,\n          isFK: false,\n          businessName: 'Total Amount',\n          flag: 'critical',\n        },\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"h-[600px] border border-coolgray-200 rounded-xl overflow-hidden\">\n      <TableView\n        entities={entities}\n        onEntityClick={(id) => console.log('Entity clicked:', id)}\n      />\n    </div>\n  );\n}\n","size_bytes":2116},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/FieldLevelLine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { Entity, Field, Cardinality } from \"@shared/schema\";\n\ninterface FieldLevelLineProps {\n  sourceEntity: Entity;\n  targetEntity: Entity;\n  sourceField: Field;\n  targetField: Field;\n  relationshipType: 'transforms-to' | 'references';\n  zoom: number;\n  panOffset: { x: number; y: number };\n  onUpdateWaypoints?: (fieldId: string, waypoints: { x: number; y: number }[]) => void;\n  cardinality?: Cardinality;\n  relationshipLabel?: string;\n  waypoints?: { x: number; y: number }[];\n}\n\nexport default function FieldLevelLine({\n  sourceEntity,\n  targetEntity,\n  sourceField,\n  targetField,\n  relationshipType,\n  zoom,\n  panOffset,\n  onUpdateWaypoints,\n  cardinality = 'many-to-one',\n  relationshipLabel,\n  waypoints: externalWaypoints,\n}: FieldLevelLineProps) {\n  const [draggedWaypointIndex, setDraggedWaypointIndex] = useState<number | null>(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const style = relationshipType === 'transforms-to' \n    ? {\n        stroke: '#BED163',\n        strokeWidth: 2,\n        strokeDasharray: '8,4',\n        showCardinality: false,\n      }\n    : {\n        stroke: '#64748B',\n        strokeWidth: 2,\n        strokeDasharray: 'none',\n        showCardinality: true,\n      };\n\n  const sourcePos = sourceEntity.position || { x: 100, y: 100 };\n  const targetPos = targetEntity.position || { x: 400, y: 100 };\n\n  const ENTITY_WIDTH = 320;\n  const HEADER_HEIGHT = 52;\n  const METADATA_HEIGHT = 36;\n  const FIELD_HEIGHT = 28;\n  const PADDING_TOP = HEADER_HEIGHT + METADATA_HEIGHT;\n  \n  const GRID_SIZE = 20;\n\n  const sourceFieldIndex = sourceEntity.fields.filter(f => f.visibleInERD !== false).findIndex(f => f.id === sourceField.id);\n  const sourceFieldY = sourcePos.y + PADDING_TOP + (sourceFieldIndex * FIELD_HEIGHT) + (FIELD_HEIGHT / 2);\n\n  const targetFieldIndex = targetEntity.fields.filter(f => f.visibleInERD !== false).findIndex(f => f.id === targetField.id);\n  const targetFieldY = targetPos.y + PADDING_TOP + (targetFieldIndex * FIELD_HEIGHT) + (FIELD_HEIGHT / 2);\n\n  const startX = sourcePos.x + ENTITY_WIDTH;\n  const startY = sourceFieldY >= 0 ? sourceFieldY : sourcePos.y + PADDING_TOP;\n  const endX = targetPos.x;\n  const endY = targetFieldY >= 0 ? targetFieldY : targetPos.y + PADDING_TOP;\n\n  const waypoints = externalWaypoints || sourceField.fkReference?.waypoints || [];\n\n  const createPath = () => {\n    if (waypoints.length === 0) {\n      // Default H-V routing: horizontal first, then vertical\n      const midX = (startX + endX) / 2;\n      return `M ${startX} ${startY} L ${midX} ${startY} L ${midX} ${endY} L ${endX} ${endY}`;\n    } else if (waypoints.length === 1) {\n      // L-shape with one waypoint (H-V or V-H)\n      const wp = waypoints[0];\n      return `M ${startX} ${startY} L ${wp.x} ${startY} L ${wp.x} ${endY} L ${endX} ${endY}`;\n    } else {\n      // Z-shape with two waypoints (H-V-H)\n      const wp1 = waypoints[0];\n      const wp2 = waypoints[1];\n      return `M ${startX} ${startY} L ${wp1.x} ${startY} L ${wp2.x} ${endY} L ${endX} ${endY}`;\n    }\n  };\n\n  const handleWaypointMouseDown = (index: number, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setDraggedWaypointIndex(index);\n  };\n\n  const handleWaypointMouseMove = (e: MouseEvent) => {\n    if (draggedWaypointIndex === null || !onUpdateWaypoints) return;\n\n    const rawX = (e.clientX - panOffset.x) / zoom;\n    const rawY = (e.clientY - panOffset.y) / zoom;\n    \n    const snappedX = Math.round(rawX / GRID_SIZE) * GRID_SIZE;\n    const snappedY = Math.round(rawY / GRID_SIZE) * GRID_SIZE;\n    \n    // For H-V-H routing, update both waypoints based on the cleared X position\n    if (waypoints.length === 0) {\n      // Create initial waypoints when dragging starts\n      onUpdateWaypoints(sourceField.id, [\n        { x: snappedX, y: startY },\n        { x: snappedX, y: endY }\n      ]);\n    } else if (waypoints.length === 1) {\n      // Single waypoint - just update X position, keep on start/end Y\n      onUpdateWaypoints(sourceField.id, [{ x: snappedX, y: startY }]);\n    } else {\n      // Two waypoints - update both to maintain H-V-H pattern\n      onUpdateWaypoints(sourceField.id, [\n        { x: snappedX, y: startY },\n        { x: snappedX, y: endY }\n      ]);\n    }\n  };\n\n  const handleWaypointMouseUp = () => {\n    setDraggedWaypointIndex(null);\n  };\n\n  // Set up event listeners for waypoint dragging\n  useEffect(() => {\n    if (draggedWaypointIndex === null) return;\n\n    window.addEventListener('mousemove', handleWaypointMouseMove);\n    window.addEventListener('mouseup', handleWaypointMouseUp);\n\n    return () => {\n      window.removeEventListener('mousemove', handleWaypointMouseMove);\n      window.removeEventListener('mouseup', handleWaypointMouseUp);\n    };\n  }, [draggedWaypointIndex, panOffset, zoom, waypoints]);\n\n  let cardinalityLabel = '';\n  if (style.showCardinality) {\n    switch (cardinality) {\n      case 'one-to-one':\n        cardinalityLabel = '1:1';\n        break;\n      case 'one-to-many':\n        cardinalityLabel = '1:M';\n        break;\n      case 'many-to-one':\n        cardinalityLabel = 'M:1';\n        break;\n    }\n  }\n\n  const pathData = createPath();\n  \n  const drawStartMarker = () => {\n    if (!style.showCardinality) return null;\n    \n    const markerSize = 12;\n    const markerColor = style.stroke;\n    \n    if (cardinality === 'one-to-one' || cardinality === 'one-to-many') {\n      return (\n        <line \n          x1={startX} \n          y1={startY - markerSize/2} \n          x2={startX} \n          y2={startY + markerSize/2} \n          stroke={markerColor} \n          strokeWidth=\"2\" \n        />\n      );\n    } else {\n      return (\n        <g>\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY - markerSize/2} stroke={markerColor} strokeWidth=\"2\" />\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY} stroke={markerColor} strokeWidth=\"2\" />\n          <line x1={startX} y1={startY} x2={startX + markerSize} y2={startY + markerSize/2} stroke={markerColor} strokeWidth=\"2\" />\n        </g>\n      );\n    }\n  };\n  \n  const drawEndMarker = () => {\n    if (!style.showCardinality) return null;\n    \n    const markerSize = 12;\n    const markerColor = style.stroke;\n    \n    if (cardinality === 'one-to-one' || cardinality === 'many-to-one') {\n      return (\n        <line \n          x1={endX} \n          y1={endY - markerSize/2} \n          x2={endX} \n          y2={endY + markerSize/2} \n          stroke={markerColor} \n          strokeWidth=\"2\" \n        />\n      );\n    } else {\n      return (\n        <g>\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY - markerSize/2} stroke={markerColor} strokeWidth=\"2\" />\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY} stroke={markerColor} strokeWidth=\"2\" />\n          <line x1={endX} y1={endY} x2={endX - markerSize} y2={endY + markerSize/2} stroke={markerColor} strokeWidth=\"2\" />\n        </g>\n      );\n    }\n  };\n  \n  const midX = waypoints.length > 0 \n    ? waypoints[Math.floor(waypoints.length / 2)].x \n    : (startX + endX) / 2;\n  const midY = waypoints.length > 0 \n    ? waypoints[Math.floor(waypoints.length / 2)].y \n    : (startY + endY) / 2;\n\n  return (\n    <g\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <path\n        d={pathData}\n        stroke=\"transparent\"\n        strokeWidth=\"12\"\n        fill=\"none\"\n        style={{ pointerEvents: 'none' }}\n      />\n\n      <path\n        d={pathData}\n        stroke={isHovered ? \"#3b82f6\" : style.stroke}\n        strokeWidth={isHovered ? String(style.strokeWidth + 1) : String(style.strokeWidth)}\n        strokeDasharray={style.strokeDasharray}\n        fill=\"none\"\n        style={{ pointerEvents: 'none' }}\n      />\n      \n      {drawStartMarker()}\n      {drawEndMarker()}\n\n      {style.showCardinality && cardinalityLabel && (\n        <text\n          x={midX}\n          y={midY - 8}\n          fill=\"#334155\"\n          fontSize=\"11\"\n          fontWeight=\"600\"\n          textAnchor=\"middle\"\n          style={{ pointerEvents: 'none', userSelect: 'none' }}\n        >\n          {cardinalityLabel}\n        </text>\n      )}\n\n      {style.showCardinality && relationshipLabel && (\n        <text\n          x={midX}\n          y={midY + 8}\n          fill=\"#64748B\"\n          fontSize=\"10\"\n          fontStyle=\"italic\"\n          textAnchor=\"middle\"\n          style={{ pointerEvents: 'none', userSelect: 'none' }}\n        >\n          {relationshipLabel}\n        </text>\n      )}\n\n      {onUpdateWaypoints && waypoints.length > 0 && (\n        <g\n          onMouseDown={(e) => handleWaypointMouseDown(0, e)}\n          style={{ cursor: 'ew-resize' }}\n        >\n          <ellipse\n            cx={waypoints[0].x}\n            cy={(startY + endY) / 2}\n            rx=\"8\"\n            ry=\"6\"\n            fill=\"white\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"2\"\n          />\n          <ellipse\n            cx={waypoints[0].x}\n            cy={(startY + endY) / 2}\n            rx=\"4\"\n            ry=\"3\"\n            fill=\"#3b82f6\"\n          />\n        </g>\n      )}\n    </g>\n  );\n}\n","size_bytes":9143},"client/src/components/EntityLevelLine.tsx":{"content":"import type { Relationship, Entity } from \"@shared/schema\";\n\ninterface EntityLevelLineProps {\n  relationship: Relationship;\n  sourceEntity: Entity;\n  targetEntity: Entity;\n  zoom: number;\n  panOffset: { x: number; y: number };\n}\n\nexport default function EntityLevelLine({\n  relationship,\n  sourceEntity,\n  targetEntity,\n  zoom,\n  panOffset,\n}: EntityLevelLineProps) {\n  const sourcePos = sourceEntity.position || { x: 100, y: 100 };\n  const targetPos = targetEntity.position || { x: 400, y: 100 };\n  \n  const ENTITY_WIDTH = 320;\n  const ENTITY_HEIGHT = 150;\n  \n  const startX = sourcePos.x + ENTITY_WIDTH;\n  const startY = sourcePos.y + ENTITY_HEIGHT / 2;\n  const endX = targetPos.x;\n  const endY = targetPos.y + ENTITY_HEIGHT / 2;\n  \n  const midX = (startX + endX) / 2;\n  const pathData = `M ${startX} ${startY} L ${midX} ${startY} L ${midX} ${endY} L ${endX} ${endY}`;\n  \n  return (\n    <g>\n      <path\n        d={pathData}\n        stroke=\"#4AA0D9\"\n        strokeWidth=\"4\"\n        fill=\"none\"\n        markerEnd=\"url(#arrow-blue)\"\n      />\n      \n      <path\n        d={pathData}\n        stroke=\"url(#data-flow-pattern)\"\n        strokeWidth=\"4\"\n        fill=\"none\"\n        style={{ pointerEvents: 'none' }}\n      />\n      \n      <text\n        x={midX}\n        y={(startY + endY) / 2 - 8}\n        fill=\"#4AA0D9\"\n        fontSize=\"11\"\n        fontWeight=\"600\"\n        textAnchor=\"middle\"\n        style={{ pointerEvents: 'none', userSelect: 'none' }}\n      >\n        {relationship.label || 'Ingests'}\n      </text>\n    </g>\n  );\n}\n","size_bytes":1529}},"version":2}